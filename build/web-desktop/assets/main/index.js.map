{"version":3,"sources":["../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/GameManager.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/HttpClient.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/ResolutionAdjuster.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/cocos-telegram-miniapps/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/cocos-telegram-miniapps/scripts/telegram-web.ts"],"names":["ccclass","property","_decorator","_dec","_dec2","Label","_dec3","_dec4","_dec5","_dec6","_descriptor","_applyDecoratedDescriptor","_class2","Component","constructor","super","arguments","_initializerDefineProperty","_descriptor2","_descriptor3","_descriptor4","_descriptor5","this","connectUI","_base_url","_tg_auth_url","onLoad","console","info","initTonConnect","TelegramWebApp","Instance","init","then","res","success","webAppInitData","getTelegramWebAppInitData","user","idLbl","string","id","nameLbl","username","initDataLbl","decodeURIComponent","getTelegramInitData","start","update","deltaTime","onConnect","isConnected","disconnect","openModal","onShare","share","TonConnectUI","manifestUrl","onModalStateChange","state","log","updateConnect","onStatusChange","connected","error","address","account","addressLbl","Address","parseRaw","toString","testOnly","bounceable","connectLbl","[object Object]","data","encodeURIComponent","response","HttpClient","post","token","response2","get","message","initData","prototype","configurable","enumerable","writable","initializer","_class","_RF","pop","url","options","fetch","ok","Error","status","statusText","json","baseUrl","path","contentType","params","authToken","URL","forEach","_ref","key","value","searchParams","append","headers","Content-Type","request","method","body","JSON","stringify","CCInteger","CCBoolean","isAutoFit","autoFit","window","addEventListener","bind","designSize","View","instance","getDesignResolutionSize","viewPortRect","getViewportRect","setOrientation","height","width","rateV","Math","abs","size","setDesignResolutionSize","fixedWidthDesignWidth","fixedWidthDesignHeight","ResolutionPolicy","FIXED_WIDTH","fixedHeightDesignWidth","fixedHeightDesignHeight","FIXED_HEIGHT","tgLoadPromise","Promise","resolve","reject","sys","platform","Platform","MOBILE_BROWSER","DESKTOP_BROWSER","script","document","createElement","src","async","onload","intervalId","setInterval","Telegram","WebApp","clearInterval","onerror","head","appendChild","_tgWebAppJS","_instance","openTelegramLink","openLink","text","shareUrl","shareToStory","media_url","shareText","widget_link_url","widget_link_name","widget_link","name","getTelegramWebApp","initDataUnsafe","getTelegramUser","openInvoice","callback","alert","showAlert"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, Label, Button, Node } from 'cc';\nimport { TelegramWebApp, WebAppInitData } from '../cocos-telegram-miniapps/scripts/telegram-web';\nimport { TonConnectUI, Address } from '@ton/cocos-sdk';\nimport { HttpClient } from './HttpClient';\n\nconst { ccclass, property } = _decorator;\n\ninterface ResponseUser {\n    status: string;\n    message?: string;\n    user?: User;\n}\n\ninterface ResponseProtected {\n    message?: string;\n    user?: User;\n}\n\ninterface User {\n    id: string;\n    first_name: string;\n    last_name: string;\n    username: string;\n    photo_url: string;\n    auth_date: string;\n    token: string;\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Label)\n    idLbl: Label = null;\n\n    @property(Label)\n    nameLbl: Label = null;\n\n    @property(Label)\n    addressLbl: Label = null;\n\n    @property(Label)\n    connectLbl: Label = null;\n\n    @property(Label)\n    initDataLbl: Label = null;\n\n    protected connectUI: TonConnectUI = null;\n\n    private _base_url: string = \"https://alpha.audiera.fi:5000/api/\";\n    private _tg_auth_url: string = \"/auth/telegram\"\n\n    protected onLoad() {\n        console.info(\"onLoad\");\n        this.initTonConnect();\n        //获取Telegram用户信息，用于小游戏登录，使用user id作为登录的唯一id\n        TelegramWebApp.Instance.init().then(res => {\n            console.info(\"telegram web app init : \", res.success);\n            var webAppInitData = TelegramWebApp.Instance.getTelegramWebAppInitData();\n            console.info(webAppInitData);\n            console.info(webAppInitData.user);\n            if (webAppInitData && webAppInitData.user) {\n                this.idLbl.string = \"Id: \" + webAppInitData.user.id; //telegram用户唯一id，可以用于tg小游戏登录\n                this.nameLbl.string = \"UserName: \" + webAppInitData.user.username;\n            }\n\n            this.initDataLbl.string = \"Init Data: \" + decodeURIComponent(TelegramWebApp.Instance.getTelegramInitData());\n            //this.tgLogin(TelegramWebApp.Instance.getTelegramInitData());\n        });\n    }\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    public onConnect() {\n        if (this.isConnected()) {\n            this.connectUI.disconnect();\n        } else {\n            this.connectUI.openModal();\n        }\n    }\n\n    //Telegram小游戏分享\n    public onShare() {\n        console.info(\"share \");\n        TelegramWebApp.Instance.share(\"https://t.me/MyTestGame029Bot/TgTest\", \"Invite you to play a very interesting game\");\n    }\n\n    //初始化ton connect ui\n    private initTonConnect() {\n        this.connectUI = new TonConnectUI({\n            manifestUrl: 'https://ton-connect.github.io/demo-dapp-with-wallet/tonconnect-manifest.json'\n        });\n      \n\n        // Listen for connection status changes\n        this.connectUI.onModalStateChange(state => {\n            console.log(\"model state changed! : \", state);\n            this.updateConnect();\n        });\n\n        // Listen for wallet status changes\n        this.connectUI.onStatusChange(info => {\n            console.log(\"wallet info status changed : \", info);\n            this.updateConnect();\n        });\n        this.updateConnect();\n    }\n\n    private isConnected(): boolean {\n        if (!this.connectUI) {\n            console.error(\"ton ui not inited!\");\n            return false;\n        }\n        return this.connectUI.connected;\n    }\n\n    // Get the wallet address after successful connection\n    private updateConnect() {\n        if (this.isConnected()) {\n            const address = this.connectUI.account.address; //用户连接的钱包地址\n            this.addressLbl.string = \"Address: \" + Address.parseRaw(address).toString({ testOnly: false, bounceable: false });\n            this.connectLbl.string = \"Connected\";\n        } else {\n            this.connectLbl.string = \"Connect\";\n            this.addressLbl.string = \"Address: \";\n        }\n    }\n\n    private async tgTestLogin() {\n        //for test telegram 授权登录接口\n        try {\n            /*const data = new URLSearchParams();\n            data.append('id', '1');\n            data.append('first_name', 'daniel');\n            data.append('last_name', 'liu');\n            data.append('username', 'daniel_liu029');\n            console.info(data.toString());\n            console.info(encodeURIComponent(data.toString()));*/\n            var data = 'user=' + encodeURIComponent('{\"id\":1,\"first_name\":\"daniel\",\"last_name\":\"liu\",\"username\":\"daniel_liu029\"}') + '&auth_date=1&hash=2&signature=3';\n            console.info(data);\n\n            var response = await HttpClient.post<ResponseUser>(this._base_url, this._tg_auth_url, \"application/x-www-form-urlencoded\", data);\n            console.info(response.user.token);\n\n            var response2 = await HttpClient.get<ResponseProtected>(this._base_url, \"/protected\", \"application/json\", null, response.user.token);\n            console.info(response2.message);\n        } catch(error) {\n            console.error(error);\n        }\n        // \n    }\n\n    private async tgLogin(initData:string) {\n        try {\n            var response = await HttpClient.post<ResponseUser>(this._base_url, this._tg_auth_url, \"application/x-www-form-urlencoded\", initData);\n            console.info(response.user.token);\n            this.initDataLbl.string = \"token: \" + response.user.token;\n\n            var response2 = await HttpClient.get<ResponseProtected>(this._base_url, \"/protected\", \"application/json\", null, response.user.token);\n            console.info(response2.message);\n        } catch(error) {\n            console.error(error);\n        }\n    }\n    \n}\n\n","import { _decorator} from 'cc';\n\nexport interface FetchOptions {\n    method?: string;\n    headers?: HeadersInit;\n    body?: BodyInit;\n}\n\nexport class HttpClient {\n    /**\n     * GET 请求\n     */\n    public static async request<T>(url: URL, options?: FetchOptions): Promise<T> {\n        try {\n            const response = await fetch(url, options);\n\n            if (!response.ok) {\n                throw new Error(`请求失败: ${response.status} - ${response.statusText}`);\n            }\n\n            return await response.json() as T;\n        } catch (error) {\n            console.error('网络请求错误:', error);\n            throw error;\n        }\n    }\n\n    // GET 请求\n    public static async get<T>(baseUrl: string, path: string, contentType: string, params?: Record<string, any>, authToken?: string) {\n        const url = new URL(path, baseUrl);\n        if (params) {\n            params.forEach(([key, value]) => {\n                url.searchParams.append(key, value as string);\n            });\n        }\n        var headers = {'Content-Type': contentType};\n        if (authToken) {\n            headers['Authorization'] = `Bearer ${authToken}`;\n        }\n        return HttpClient.request<T>(url, {\n            method: 'GET',\n            headers: headers\n        });\n    }\n\n    // POST 请求\n    public static async post<T>(baseUrl: string, path: string, contentType: string, data?: any, authToken?: string) {\n        const url = new URL(path, baseUrl);\n        var headers = {'Content-Type': contentType};\n        if (authToken) {\n            headers['Authorization'] = `Bearer ${authToken}`;\n        }\n        return HttpClient.request<T>(url, {\n            method: 'POST',\n            headers: headers,\n            body: contentType == \"application/json\" ? JSON.stringify(data) : data,\n        });\n    }\n}","import { _decorator, Canvas, CCBoolean, CCInteger, Component, Node, ResolutionPolicy, View } from 'cc';\nimport { LogManager } from '../../scripts/framework/common/LogManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ResolutionAdjuster')\nexport class ResolutionAdjuster extends Component {\n    @property(CCInteger)\n    fixedWidthDesignWidth: number = 1280;\n    @property(CCInteger)\n    fixedWidthDesignHeight: number = 720;\n\n    @property(CCInteger)\n    fixedHeightDesignWidth: number = 720;\n    @property(CCInteger)\n    fixedHeightDesignHeight: number = 1280;\n\n    @property(CCBoolean)\n    isAutoFit: boolean = true;\n\n    protected onLoad(): void {\n        if (this.isAutoFit)\n        {\n            this.autoFit();\n            window.addEventListener('resize', this.autoFit.bind(this));\n            // Screen.on('orientation-change', this.autoFit.bind(this));\n        }\n    }\n\n    protected start(): void {\n        if (this.isAutoFit)\n        {\n            this.autoFit();\n        }\n    }\n\n    private autoFit(): void {\n\n        let designSize = View.instance.getDesignResolutionSize();\n        // console.log(`desginSize = ${designSize}`);\n\n        // let visibleSize = View.instance.getVisibleSize();\n        // console.log(`visibleSize = ${visibleSize}`);\n\n        let viewPortRect = View.instance.getViewportRect();\n        View.instance.setOrientation\n        console.log(`viewPortRect = ${viewPortRect}`);\n        \n        let rateR = designSize.height / designSize.width;\n        let rateV = Math.abs(viewPortRect.size.height) / Math.abs(viewPortRect.size.width);\n        \n        // let rp = ResolutionPolicy.FIXED_HEIGHT;\n        // if (rateV < 1.0)\n        // {\n        //     rp = ResolutionPolicy.FIXED_WIDTH;\n        // }\n\n        console.log(`rateV = ${rateV}`)\n        if (rateV < 1.0)\n        {\n            View.instance.setDesignResolutionSize(this.fixedWidthDesignWidth, this.fixedWidthDesignHeight, ResolutionPolicy.FIXED_WIDTH);\n        }\n        else\n        {\n            View.instance.setDesignResolutionSize(this.fixedHeightDesignWidth, this.fixedHeightDesignHeight, ResolutionPolicy.FIXED_HEIGHT);\n        }\n    }\n}\n\n\n","import { _decorator, sys } from 'cc';\nconst { ccclass, property } = _decorator;\n\n\nconst tgLoadPromise = new Promise<any>((resolve, reject) => {\n    if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.DESKTOP_BROWSER) {\n        const script = document.createElement(\"script\");\n        script.src = \"https://telegram.org/js/telegram-web-app.js\";\n        script.async = true;\n        script.onload = () => {\n            const intervalId = setInterval(() => {\n                if ((window as any).Telegram && (window as any).Telegram.WebApp) {\n                    resolve((window as any).Telegram.WebApp);\n                    clearInterval(intervalId);\n                }\n            }, 100);\n        };\n        script.onerror = () => reject(new Error(\"Unable to load TelegramWebApp SDK, please check logs.\"));\n        document.head.appendChild(script);\n    }\n});\n\nexport interface WebAppUser {\n    id: number;\n    is_bot: boolean;\n    first_name: string;\n    last_name?: string;\n    username?: string;\n    language_code?: string;\n    is_premium?: boolean;\n    added_to_attachment_menu?: boolean;\n    allows_write_to_pm?: boolean;\n    photo_url?: string;\n}\nexport interface WebAppChat {\n    id: number;\n    type: 'private' | 'group' | 'supergroup' | 'channel';\n    title: string;\n    username?: string;\n    photo_url?: string;\n}\nexport interface WebAppInitData {\n    query_id?: string;\n    user?: WebAppUser;\n    receiver?: WebAppUser;\n    chat?: WebAppChat;\n    chat_type?: 'private' | 'group' | 'supergroup' | 'channel';\n    chat_instance?: string;\n    start_param?: string;\n    can_send_after?: number;\n    auth_data: number;\n    hash: string;\n}\n\n@ccclass('TelegramWebApp')\nexport class TelegramWebApp {\n    private static _instance: TelegramWebApp;\n    private constructor() {\n\n    }\n    public static get Instance(): TelegramWebApp {\n        if (!TelegramWebApp._instance) {\n            TelegramWebApp._instance = new TelegramWebApp();\n        }\n        return TelegramWebApp._instance;\n    }\n\n    private _tgWebAppJS: any = null;\n    public async init(): Promise<{ success: boolean }> {\n        this._tgWebAppJS = await tgLoadPromise;\n\n        if (this._tgWebAppJS) {\n            return Promise.resolve({ success: true });\n        } else {\n            return Promise.resolve({ success: false });\n        }\n    }\n\n    public openTelegramLink(url: string) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        this._tgWebAppJS.openTelegramLink(url);\n    }\n\n    public openLink(url: string, options: any = {}) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        this._tgWebAppJS.openLink(url, options);\n    }\n\n    public share(url: string, text?: string) {\n        const shareUrl = 'https://t.me/share/url?url=' + encodeURIComponent(url) + '&text=' + encodeURIComponent(text || '');\n        this.openTelegramLink(shareUrl);\n    }\n\n    public shareToStory(media_url: string, shareText?: string, widget_link_url?: string, widget_link_name?: string) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        const widget_link = {\n            text: shareText,\n            widget_link: {\n                url: widget_link_url,\n                name: widget_link_name,\n            },\n        };\n        this._tgWebAppJS.shareToStory(media_url, widget_link);\n    }\n\n    public getTelegramWebApp() {\n        return this._tgWebAppJS;\n    }\n\n    public getTelegramWebAppInitData(): WebAppInitData {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initDataUnsafe;\n    }\n\n\n    public getTelegramUser(): WebAppUser {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initDataUnsafe.user;\n    }\n\n    public getTelegramInitData(): string {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initData;\n    }\n\n    public openInvoice(url: string, callback: any) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        this._tgWebAppJS.openInvoice(url, callback);\n    }\n\n    public alert(message: string) {\n        this._tgWebAppJS.showAlert(message);\n    }\n}\n\n\n"]}