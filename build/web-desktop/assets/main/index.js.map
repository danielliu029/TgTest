{"version":3,"sources":["../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/GameManager.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/HttpClient.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/scripts/ResolutionAdjuster.ts","../file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/cocos-telegram-miniapps/scripts/file:/Users/liuyingbin/code/github/src/danielliu029/TgTest/assets/cocos-telegram-miniapps/scripts/telegram-web.ts"],"names":["ccclass","property","_decorator","_dec","_dec2","Label","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","Button","_dec9","_class3","GameManager","Component","constructor","super","arguments","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","this","connectUI","_base_url","_local_host","_login_path","_test_login_path","_bind_ton_wallet_path","_unbind_ton_wallet_path","_dance_end_path","_user","_token","onLoad","console","info","_test_login","testLogin","connectButton","enabled","initTonConnect","TelegramWebApp","Instance","init","then","res","success","webAppInitData","getTelegramWebAppInitData","user","debugInfo","string","decodeURIComponent","getTelegramInitData","tgLogin","start","update","deltaTime","onConnect","isConnected","doDisconnect","openModal","onDanceEnd","danceEnd","onShare","share","TonConnectUI","manifestUrl","onModalStateChange","state","log","updateConnect","onStatusChange","checkBindWallet","ton_wallet","connected","error","[object Object]","disconnect","unbindWallet","addressLbl","connectLbl","strAddress","Address","parseRaw","account","address","toString","testOnly","bounceable","bindTonWallet","setUserInfo","response","token","idLbl","tg_id","username","nameLbl","first_name","last_name","pointsLbl","points","data","encodeURIComponent","HttpClient","post","initData","wallet","dic","addPoints","_applyDecoratedDescriptor","_class2","prototype","configurable","enumerable","writable","initializer","_class","_RF","pop","url","options","fetch","ok","Error","status","statusText","json","baseUrl","path","contentType","params","authToken","URL","forEach","_ref","key","value","searchParams","append","headers","Content-Type","request","method","body","JSON","stringify","CCInteger","CCBoolean","isAutoFit","autoFit","window","addEventListener","bind","designSize","View","instance","getDesignResolutionSize","viewPortRect","getViewportRect","setOrientation","height","width","rateV","Math","abs","size","setDesignResolutionSize","fixedWidthDesignWidth","fixedWidthDesignHeight","ResolutionPolicy","FIXED_WIDTH","fixedHeightDesignWidth","fixedHeightDesignHeight","FIXED_HEIGHT","tgLoadPromise","Promise","resolve","reject","sys","platform","Platform","MOBILE_BROWSER","DESKTOP_BROWSER","script","document","createElement","src","async","onload","intervalId","setInterval","Telegram","WebApp","clearInterval","onerror","head","appendChild","_tgWebAppJS","_instance","openTelegramLink","openLink","text","shareUrl","shareToStory","media_url","shareText","widget_link_url","widget_link_name","widget_link","name","getTelegramWebApp","initDataUnsafe","getTelegramUser","openInvoice","callback","alert","message","showAlert"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, Label, Button, Node, randomRangeInt } from 'cc';\nimport { TelegramWebApp, WebAppInitData } from '../cocos-telegram-miniapps/scripts/telegram-web';\nimport { TonConnectUI, Address } from '@ton/cocos-sdk';\nimport { HttpClient } from './HttpClient';\n\nconst { ccclass, property } = _decorator;\n\ninterface ResponseLogin {\n    status: string;\n    user?: User;\n    token?: string; //授权token\n    message?: string;\n    code?: number;\n}\n\ninterface User {\n    tg_id: number; //telegram 用户唯一id\n    username: string; \n    first_name: string;\n    last_name: string;\n    photo_url: string;\n    ton_wallet: string;\n    points: number;  //用户游戏累积积分\n    referral_tg_id: number; //推荐者tg id\n    acc_referral_points: number;  //累积推荐所获得的积分奖励\n    acc_referral_number: number;  //累积推荐的人数\n    last_interaction: number; //最后一次交互时间\n}\n\ninterface ResponseBindWallet {\n    status: string;\n    wallet?: string;\n    message?: string;\n    code?: number;\n}\n\ninterface ResponseUnBindWallet {\n    status: string;\n    message?: string;\n    code?: number;\n}\n\ninterface ResponseDanceEnd {\n    status: string;\n    points?: number;\n    message?: string;\n    code?: number;\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Label)\n    idLbl: Label = null;\n\n    @property(Label)\n    nameLbl: Label = null;\n\n    @property(Label)\n    addressLbl: Label = null;\n\n    @property(Label)\n    pointsLbl: Label = null;\n\n    @property(Label)\n    connectLbl: Label = null;\n\n    @property(Label)\n    debugInfo: Label = null;\n\n    @property(Button)\n    connectButton: Button = null;\n\n    @property(Button)\n    danceEndButton: Button = null;\n\n    protected connectUI: TonConnectUI = null;\n\n\n    private static _local_host: boolean = false;\n    private static _test_login: boolean = false;\n    private _base_url: string = GameManager._local_host ? \"http://127.0.0.1:5000\" : \"https://alpha.audiera.fi\";\n    private _login_path: string = \"/api/auth/telegram\"; //登录接口\n    private _test_login_path: string = \"/api/test/telegram\"; //测试无需验证登录接口\n    private _bind_ton_wallet_path: string = \"/api/bindTonWallet\"; //绑定ton 钱包接口\n    private _unbind_ton_wallet_path: string = \"/api/unbindTonWallet\"; //解绑ton 钱包接口\n    private _dance_end_path: string = \"/api/danceEnd\"; //跳舞结束统计积分接口\n    private _user: User = null;\n    private _token: string = \"\";\n\n    protected onLoad() {\n        console.info(\"onLoad\");\n        if (GameManager._test_login) {\n            this.testLogin();\n            this.connectButton.enabled = false;\n        } else {\n            this.connectButton.enabled = true;\n            this.initTonConnect();\n            //获取Telegram用户信息，用于小游戏登录，使用user id作为登录的唯一id\n            TelegramWebApp.Instance.init().then(res => {\n                console.info(\"telegram web app init : \", res.success);\n                var webAppInitData = TelegramWebApp.Instance.getTelegramWebAppInitData();\n                console.info(webAppInitData);\n                console.info(webAppInitData.user);\n                this.debugInfo.string = \"Init Data: \" + decodeURIComponent(TelegramWebApp.Instance.getTelegramInitData());\n                this.tgLogin(TelegramWebApp.Instance.getTelegramInitData());\n            });   \n        }\n    }\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    public onConnect() {\n        if (this.isConnected(true)) {\n            this.doDisconnect();\n        } else {\n            this.connectUI.openModal();\n        }\n    }\n\n    public onDanceEnd() {\n        //for test\n        this.danceEnd(200);\n        //--\n    }\n\n    //Telegram小游戏分享\n    public onShare() {\n        console.info(\"share \");\n        TelegramWebApp.Instance.share(\"https://t.me/MyTestGame029Bot/TgTest\", \"Invite you to play a very interesting game\");\n    }\n\n    //初始化ton connect ui\n    private initTonConnect() {\n        this.connectUI = new TonConnectUI({\n            manifestUrl: 'https://ton-connect.github.io/demo-dapp-with-wallet/tonconnect-manifest.json'\n        });\n      \n\n        // Listen for connection status changes\n        this.connectUI.onModalStateChange(state => {\n            console.log(\"model state changed! : \", state);\n            this.updateConnect();\n        });\n\n        // Listen for wallet status changes\n        this.connectUI.onStatusChange(info => {\n            console.log(\"wallet info status changed : \", info);\n            this.updateConnect();\n        });\n    }\n\n    private isConnected(checkBindWallet:boolean): boolean {\n        if (!this.connectUI) {\n            console.error(\"ton ui not inited!\");\n            return false;\n        }\n\n        if (checkBindWallet) {\n            if (this._user != null && this._user.ton_wallet != \"\") {\n                return true;\n            }\n        }\n\n        return this.connectUI.connected;\n    }\n\n    private async doDisconnect() {\n        if (this.connectUI.connected) {\n            this.connectUI.disconnect();\n        } else {\n            await this.unbindWallet();\n            this._user.ton_wallet = \"\";\n            this.addressLbl.string = \"Address: \";\n            this.connectLbl.string = \"Connect\";\n        }\n    }\n\n    // Get the wallet address after successful connection\n    private async updateConnect() {\n        if (this.isConnected(false)) {\n            //用户连接的钱包地址\n            var strAddress: string = Address.parseRaw(this.connectUI.account.address).toString({ testOnly: false, bounceable: false });\n            this._user.ton_wallet = await this.bindTonWallet(strAddress);\n            this.addressLbl.string = \"Address: \" + this._user.ton_wallet;\n            this.connectLbl.string = \"Connected\";\n        } else {\n            await this.unbindWallet();\n            this._user.ton_wallet = \"\";\n            this.addressLbl.string = \"Address: \";\n            this.connectLbl.string = \"Connect\";\n        }\n    }\n\n    private setUserInfo(response: ResponseLogin) {\n        this._user = response.user;\n        this._token = response.token;\n        this.idLbl.string = this._user.tg_id.toString();\n        //优先显示username\n        if (this._user.username != \"\") {\n            this.nameLbl.string = this._user.username;\n        } else {\n            this.nameLbl.string = this._user.first_name + \" \" + this._user.last_name;\n        }\n        \n        this.addressLbl.string = \"Address: \" + this._user.ton_wallet;\n        this.connectLbl.string = this.isConnected(true) ? \"Connected\" : \"Connect\";\n        this.pointsLbl.string = \"Points: \" + this._user.points.toString();\n    }\n\n    //以下接口请求\n    //test登录接口, 无需授权\n    private async testLogin() {\n        try {\n            var data = 'user=' + encodeURIComponent('{\"id\":1,\"first_name\":\"yingbin\",\"last_name\":\"liu\",\"username\":\"daniel029\"}') + '&auth_date=1&hash=2&signature=3';\n            console.info(data);\n\n            var response = await HttpClient.post<ResponseLogin>(this._base_url, this._test_login_path, \"application/x-www-form-urlencoded\", data);\n            this.setUserInfo(response);\n            this.debugInfo.string = \"\";\n        } catch(error) {\n            console.error(error);\n        }\n    }\n\n    //正式的telegram小游戏授权登录接口\n    private async tgLogin(initData:string) {\n        try {\n            console.info(\"tg login: \", initData);\n            var response = await HttpClient.post<ResponseLogin>(this._base_url, this._login_path, \"application/x-www-form-urlencoded\", initData);\n            this.setUserInfo(response);\n            this.debugInfo.string = \"\";\n        } catch(error) {\n            console.error(error);\n            this.debugInfo.string = \"error: \" + error.toString();\n        }\n    }\n\n    //绑定钱包接口\n    private async bindTonWallet(wallet:string) {\n        try {\n            if (this._token == \"\") {\n                return \"\";\n            }\n\n            console.info(\"bindWallet: \", wallet);\n            var dic = {\n                \"wallet\": wallet\n            }\n            var response = await HttpClient.post<ResponseBindWallet>(this._base_url, this._bind_ton_wallet_path, \"application/json\", dic, this._token);\n            this.debugInfo.string = \"\";\n            return response.wallet;\n\n        } catch(error) {\n            console.error(error);\n            this.debugInfo.string = \"error: \" + error.toString();\n        }\n    }\n\n    //取消绑定接口\n    private async unbindWallet() {\n        try {\n            if (this._token == \"\") {\n                return;\n            }\n            console.info(\"unBindWallet\");\n            await HttpClient.post<ResponseUnBindWallet>(this._base_url, this._unbind_ton_wallet_path, \"application/json\", {}, this._token);\n            this.debugInfo.string = \"\";\n        } catch(error) {\n            console.error(error);\n            this.debugInfo.string = \"error: \" + error.toString();\n        }\n    }\n\n    //跳舞接受后积分统计接口\n    private async danceEnd(addPoints: number) {\n        try {\n            if (this._token == \"\") {\n                return 0;\n            }\n\n            console.info(\"danceEnd: \", addPoints);\n            var dic = {\n                \"points\": addPoints\n            }\n            var response = await HttpClient.post<ResponseDanceEnd>(this._base_url, this._dance_end_path, \"application/json\", dic, this._token);\n            this._user.points = response.points;\n            this.pointsLbl.string = \"Points: \" + this._user.points.toString();\n            this.debugInfo.string = \"\";\n        } catch(error) {\n            console.error(error);\n            this.debugInfo.string = \"error: \" + error.toString();\n        }\n    }\n}\n\n","import { _decorator} from 'cc';\n\nexport interface FetchOptions {\n    method?: string;\n    headers?: HeadersInit;\n    body?: BodyInit;\n}\n\nexport class HttpClient {\n    /**\n     * GET 请求\n     */\n    public static async request<T>(url: URL, options?: FetchOptions): Promise<T> {\n        try {\n            const response = await fetch(url, options);\n\n            if (!response.ok) {\n                throw new Error(`请求失败: ${response.status} - ${response.statusText}`);\n            }\n\n            return await response.json() as T;\n        } catch (error) {\n            console.error('网络请求错误:', error);\n            throw error;\n        }\n    }\n\n    // GET 请求\n    public static async get<T>(baseUrl: string, path: string, contentType: string, params?: Record<string, any>, authToken?: string) {\n        const url = new URL(path, baseUrl);\n        if (params) {\n            params.forEach(([key, value]) => {\n                url.searchParams.append(key, value as string);\n            });\n        }\n        var headers = {'Content-Type': contentType};\n        if (authToken) {\n            headers['Authorization'] = `Bearer ${authToken}`;\n        }\n        return HttpClient.request<T>(url, {\n            method: 'GET',\n            headers: headers\n        });\n    }\n\n    // POST 请求\n    public static async post<T>(baseUrl: string, path: string, contentType: string, data?: any, authToken?: string) {\n        const url = new URL(path, baseUrl);\n        var headers = {'Content-Type': contentType};\n        if (authToken) {\n            headers['Authorization'] = `Bearer ${authToken}`;\n        }\n        return HttpClient.request<T>(url, {\n            method: 'POST',\n            headers: headers,\n            body: contentType == \"application/json\" ? JSON.stringify(data) : data,\n        });\n    }\n}","import { _decorator, Canvas, CCBoolean, CCInteger, Component, Node, ResolutionPolicy, View } from 'cc';\nimport { LogManager } from '../../scripts/framework/common/LogManager';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ResolutionAdjuster')\nexport class ResolutionAdjuster extends Component {\n    @property(CCInteger)\n    fixedWidthDesignWidth: number = 1280;\n    @property(CCInteger)\n    fixedWidthDesignHeight: number = 720;\n\n    @property(CCInteger)\n    fixedHeightDesignWidth: number = 720;\n    @property(CCInteger)\n    fixedHeightDesignHeight: number = 1280;\n\n    @property(CCBoolean)\n    isAutoFit: boolean = true;\n\n    protected onLoad(): void {\n        if (this.isAutoFit)\n        {\n            this.autoFit();\n            window.addEventListener('resize', this.autoFit.bind(this));\n            // Screen.on('orientation-change', this.autoFit.bind(this));\n        }\n    }\n\n    protected start(): void {\n        if (this.isAutoFit)\n        {\n            this.autoFit();\n        }\n    }\n\n    private autoFit(): void {\n\n        let designSize = View.instance.getDesignResolutionSize();\n        // console.log(`desginSize = ${designSize}`);\n\n        // let visibleSize = View.instance.getVisibleSize();\n        // console.log(`visibleSize = ${visibleSize}`);\n\n        let viewPortRect = View.instance.getViewportRect();\n        View.instance.setOrientation\n        console.log(`viewPortRect = ${viewPortRect}`);\n        \n        let rateR = designSize.height / designSize.width;\n        let rateV = Math.abs(viewPortRect.size.height) / Math.abs(viewPortRect.size.width);\n        \n        // let rp = ResolutionPolicy.FIXED_HEIGHT;\n        // if (rateV < 1.0)\n        // {\n        //     rp = ResolutionPolicy.FIXED_WIDTH;\n        // }\n\n        console.log(`rateV = ${rateV}`)\n        if (rateV < 1.0)\n        {\n            View.instance.setDesignResolutionSize(this.fixedWidthDesignWidth, this.fixedWidthDesignHeight, ResolutionPolicy.FIXED_WIDTH);\n        }\n        else\n        {\n            View.instance.setDesignResolutionSize(this.fixedHeightDesignWidth, this.fixedHeightDesignHeight, ResolutionPolicy.FIXED_HEIGHT);\n        }\n    }\n}\n\n\n","import { _decorator, sys } from 'cc';\nconst { ccclass, property } = _decorator;\n\n\nconst tgLoadPromise = new Promise<any>((resolve, reject) => {\n    if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.DESKTOP_BROWSER) {\n        const script = document.createElement(\"script\");\n        script.src = \"https://telegram.org/js/telegram-web-app.js\";\n        script.async = true;\n        script.onload = () => {\n            const intervalId = setInterval(() => {\n                if ((window as any).Telegram && (window as any).Telegram.WebApp) {\n                    resolve((window as any).Telegram.WebApp);\n                    clearInterval(intervalId);\n                }\n            }, 100);\n        };\n        script.onerror = () => reject(new Error(\"Unable to load TelegramWebApp SDK, please check logs.\"));\n        document.head.appendChild(script);\n    }\n});\n\nexport interface WebAppUser {\n    id: number;\n    is_bot: boolean;\n    first_name: string;\n    last_name?: string;\n    username?: string;\n    language_code?: string;\n    is_premium?: boolean;\n    added_to_attachment_menu?: boolean;\n    allows_write_to_pm?: boolean;\n    photo_url?: string;\n}\nexport interface WebAppChat {\n    id: number;\n    type: 'private' | 'group' | 'supergroup' | 'channel';\n    title: string;\n    username?: string;\n    photo_url?: string;\n}\nexport interface WebAppInitData {\n    query_id?: string;\n    user?: WebAppUser;\n    receiver?: WebAppUser;\n    chat?: WebAppChat;\n    chat_type?: 'private' | 'group' | 'supergroup' | 'channel';\n    chat_instance?: string;\n    start_param?: string;\n    can_send_after?: number;\n    auth_data: number;\n    hash: string;\n}\n\n@ccclass('TelegramWebApp')\nexport class TelegramWebApp {\n    private static _instance: TelegramWebApp;\n    private constructor() {\n\n    }\n    public static get Instance(): TelegramWebApp {\n        if (!TelegramWebApp._instance) {\n            TelegramWebApp._instance = new TelegramWebApp();\n        }\n        return TelegramWebApp._instance;\n    }\n\n    private _tgWebAppJS: any = null;\n    public async init(): Promise<{ success: boolean }> {\n        this._tgWebAppJS = await tgLoadPromise;\n\n        if (this._tgWebAppJS) {\n            return Promise.resolve({ success: true });\n        } else {\n            return Promise.resolve({ success: false });\n        }\n    }\n\n    public openTelegramLink(url: string) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        this._tgWebAppJS.openTelegramLink(url);\n    }\n\n    public openLink(url: string, options: any = {}) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        this._tgWebAppJS.openLink(url, options);\n    }\n\n    public share(url: string, text?: string) {\n        const shareUrl = 'https://t.me/share/url?url=' + encodeURIComponent(url) + '&text=' + encodeURIComponent(text || '');\n        this.openTelegramLink(shareUrl);\n    }\n\n    public shareToStory(media_url: string, shareText?: string, widget_link_url?: string, widget_link_name?: string) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return;\n        }\n        const widget_link = {\n            text: shareText,\n            widget_link: {\n                url: widget_link_url,\n                name: widget_link_name,\n            },\n        };\n        this._tgWebAppJS.shareToStory(media_url, widget_link);\n    }\n\n    public getTelegramWebApp() {\n        return this._tgWebAppJS;\n    }\n\n    public getTelegramWebAppInitData(): WebAppInitData {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initDataUnsafe;\n    }\n\n\n    public getTelegramUser(): WebAppUser {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initDataUnsafe.user;\n    }\n\n    public getTelegramInitData(): string {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        return this._tgWebAppJS.initData;\n    }\n\n    public openInvoice(url: string, callback: any) {\n        if (!this._tgWebAppJS) {\n            console.error(\"telegram web app is not inited!\");\n            return null;\n        }\n        this._tgWebAppJS.openInvoice(url, callback);\n    }\n\n    public alert(message: string) {\n        this._tgWebAppJS.showAlert(message);\n    }\n}\n\n\n"]}