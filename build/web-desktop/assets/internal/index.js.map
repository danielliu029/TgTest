{"version":3,"sources":["../file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-settings.ts","../file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline-types.ts","../file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/file:/Applications/Cocos/Creator/3.8.5/CocosCreator.app/Contents/Resources/resources/3d/engine/editor/assets/default_renderpipeline/builtin-pipeline.ts"],"names":["ccclass","disallowMultiple","executeInEditMode","menu","property","requireComponent","type","_decorator","_dec","_dec2","_dec3","Camera","_dec4","CCBoolean","_dec5","displayName","_dec6","group","id","name","_dec7","style","CCInteger","range","_dec8","_dec9","tooltip","CCFloat","slide","_dec10","_dec11","Material","_dec12","_dec13","_dec14","min","_dec15","_dec16","_dec17","_dec18","Texture2D","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_class","_descriptor","_applyDecoratedDescriptor","_class2","Component","constructor","super","arguments","_initializerDefineProperty","_descriptor2","getPipelineSettings","this","_settings","onEnable","fillRequiredPipelineSettings","getComponent","camera","pipelineSettings","onDisable","editorPreview","_editorPreview","v","_tryEnableEditorPreview","undefined","rendering","setEditorPipelineSettings","_disableEditorPreview","getEditorPipelineSettings","MsaaEnable","msaa","enabled","value","msaaSampleCount","Math","ceil","log2","max","sampleCount","shadingScaleEnable","enableShadingScale","shadingScale","bloomEnable","bloom","bloomMaterial","material","bloomEnableAlphaMask","enableAlphaMask","bloomIterations","iterations","bloomThreshold","threshold","bloomIntensity","intensity","colorGradingEnable","colorGrading","colorGradingMaterial","colorGradingContribute","contribute","colorGradingMap","val","fxaaEnable","fxaa","fxaaMaterial","fsrEnable","fsr","fsrMaterial","fsrSharpness","sharpness","toneMappingMaterial","toneMapping","prototype","configurable","enumerable","writable","initializer","makePipelineSettings","Object","getOwnPropertyDescriptor","_RF","pop","radiusScale","angleBiasDegree","blurSharpness","aoSaturation","needBlur","fillRequiredMSAA","makeMSAA","fillRequiredBloom","fillRequiredToneMapping","fillRequiredColorGrading","fillRequiredFSR","fillRequiredFXAA","SampleCount","gfx","X4","makeBloom","makeColorGrading","makeFSR","makeFXAA","makeToneMapping","AABB","Sphere","intersect","geometry","ClearFlagBit","Color","Format","FormatFeatureBit","LoadOp","StoreOp","TextureType","Viewport","scene","renderer","CameraUsage","CSMLevel","LightType","forwardNeedClearColor","clearFlag","COLOR","STENCIL","getCsmMainLightViewport","light","w","h","level","vp","screenSpaceSignY","shadowFixedArea","csmLevel","LEVEL_1","left","top","width","trunc","height","floor","PipelineConfigs","isWeb","isWebGL1","isWebGPU","isMobile","isHDR","useFloatOutput","toneMappingType","shadowEnabled","shadowMapFormat","R32F","shadowMapSize","Vec2","usePlanarShadow","supportDepthSample","mobileMaxSpotLightShadowMaps","platform","Vec4","setupPipelineConfigs","ppl","configs","sampleFeature","SAMPLED_TEXTURE","LINEAR_FILTER","device","sys","isNative","gfxAPI","API","WEBGL","WEBGPU","pipelineSceneData","getMacroBool","postSettings","shadowInfo","shadows","pipeline","supportsR32FloatTexture","RGBA8","set","size","ShadowType","Planar","capabilities","getFormatFeatures","DEPTH_STENCIL","x","clipSpaceSignY","defaultSettings","CameraConfigs","settings","isMainGameWindow","renderWindowId","colorName","depthStencilName","enableFullPipeline","enableProfiler","remainingPasses","nativeWidth","nativeHeight","enableHDR","radianceFormat","copyAndTonemapMaterial","enableStoreSceneDepth","sClearColorTransparentBlack","addCopyToScreenPass","pplConfigs","cameraConfigs","input","assert","pass","addRenderPass","addRenderTarget","CLEAR","STORE","addTexture","setVec4","addQueue","QueueHint","OPAQUE","addFullscreenQuad","getPingPongRenderTarget","prevName","prefix","startsWith","Number","charAt","length","ForwardLighting","lights","shadowEnabledSpotLights","_sphere","create","_boundingBox","_rangedDirLightBoundingBox","cullLights","frustum","cameraPos","spotLights","baked","position","y","z","sphereFrustum","push","sphereLights","pointLights","rangedDirLights","transform","node","getWorldMatrix","aabbFrustum","sort","lhs","rhs","Vec3","squaredDistance","_addLightQueues","queue","BLEND","SPHERE","SPOT","POINT","RANGED_DIRECTIONAL","addScene","SceneFlags","addSpotlightShadowPasses","maxNumShadowMaps","i","shadowPass","addDepthStencil","DISCARD","NONE","MASK","SHADOW_CASTER","useLightFrustum","addLightQueues","addLightPasses","depthStencilStoreOp","viewport","count","storeOp","setViewport","LOAD","isMultipleLightPassesNeeded","BuiltinForwardPassBuilder","forwardLighting","_viewport","_clearColor","_reflectionProbeClearColor","getConfigOrder","ConfigOrder","getRenderOrder","RenderOrder","configCamera","pipelineConfigs","enableMainLightShadowMap","mainLight","enableMainLightPlanarShadowMap","enablePlanarReflectionProbe","cameraUsage","SCENE_VIEW","enableMSAA","enableSingleForwardPass","windowResize","window","ResourceFlags","ResourceResidency","TEX2D","COLOR_ATTACHMENT","MEMORYLESS","DEPTH_STENCIL_ATTACHMENT","setup","context","_addCascadedShadowMapPass","_tryAddReflectionProbePasses","_addForwardRadiancePasses","shadowSize","csmSupported","reflectionProbeManager","cclegacy","internal","probes","getProbes","probeID","probe","needRender","area","renderArea","probeType","ProbeType","PLANAR","realtimePlanarTexture","addRenderWindow","probePass","_buildReflectionProbePass","colorStoreOp","clearColor","packRGBE","clearDepth","clearStencil","REFLECTION_PROBE","disableMSAA","round","_addForwardSingleRadiancePass","_addForwardMultipleRadiancePasses","_addPlanarShadowQueue","sceneFlags","geometryRenderer","GEOMETRY","msaaRadianceName","msaaDepthStencilName","msPass","addMultisampleRenderPass","_buildForwardMainLightPass","resolveRenderTarget","firstStoreOp","PLANAR_SHADOW","BuiltinBloomPassBuilder","_clearColorTransparentBlack","_bloomParams","_bloomTexSize","_bloomWidths","_bloomHeights","_bloomTexNames","enableBloom","bloomWidth","bloomHeight","prevRenderPass","_addKawaseDualFilterBloomPasses","radianceName","sizeCount","prefilterPass","downPass","upPass","combinePass","BuiltinToneMappingPassBuilder","_colorGradingTexSize","enableColorGrading","enableToneMapping","setProperty","_addCopyAndTonemapPass","ldrColorPrefix","ldrColorName","lutTex","isSquareMap","setVec2","setFloat","BuiltinFXAAPassBuilder","_fxaaParams","enableFXAA","_addFxaaPass","inputColorName","BuiltinFsrPassBuilder","_fsrParams","_fsrTexSize","enableFSR","outputColorName","_addFsrPass","clamp","fsrColorName","easuPass","rcasPass","BuiltinUiPassBuilder","flags","UI","PROFILER","showStatistics","BuiltinPipelineBuilder","_pipelineEvent","director","root","pipelineEvent","_forwardPass","_bloomPass","_toneMappingPass","_fxaaPass","_fsrPass","_uiPass","_configs","_cameraConfigs","_copyAndTonemapMaterial","_initialized","_passBuilders","_setupPipelinePreview","PREVIEW","editorSettings","_preparePipelinePasses","passBuilders","_passes","_setupBuiltinCameraConfigs","GAME","swapchain","visibility","Layers","Enum","DEFAULT","DEBUG","RGBA16F","_setupCameraConfigs","a","b","builder","cameras","_initMaterials","emit","PipelineEventType","RENDER_CAMERA_BEGIN","_buildForwardPipeline","_buildSimplePipeline","RENDER_CAMERA_END","sortPipelinePassBuildersByRenderOrder","lastPass","_uuid","initialize","effectName","effectAsset","setCustomPipeline"],"mappings":"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","file":"all.js","sourcesContent":["/*\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\n\n https://www.cocos.com/\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n of the Software, and to permit persons to whom the Software is furnished to do so,\n subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\nimport {\n    _decorator, Camera, CCBoolean, CCFloat, CCInteger, Component,\n    Material, rendering, Texture2D,\n} from 'cc';\n\nimport { EDITOR } from 'cc/env';\n\nimport {\n    fillRequiredPipelineSettings, makePipelineSettings, PipelineSettings,\n} from './builtin-pipeline-types';\n\nconst { ccclass, disallowMultiple, executeInEditMode, menu, property, requireComponent, type } = _decorator;\n\n@ccclass('BuiltinPipelineSettings')\n@menu('Rendering/BuiltinPipelineSettings')\n@requireComponent(Camera)\n@disallowMultiple\n@executeInEditMode\nexport class BuiltinPipelineSettings extends Component {\n    @property\n    private readonly _settings: PipelineSettings = makePipelineSettings();\n\n    getPipelineSettings(): PipelineSettings {\n        return this._settings;\n    }\n\n    // Enable/Disable\n    onEnable(): void {\n        fillRequiredPipelineSettings(this._settings);\n        const cameraComponent = this.getComponent(Camera)!;\n        const camera = cameraComponent.camera;\n        camera.pipelineSettings = this._settings;\n\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    onDisable(): void {\n        const cameraComponent = this.getComponent(Camera)!;\n        const camera = cameraComponent.camera;\n        camera.pipelineSettings = null;\n\n        if (EDITOR) {\n            this._disableEditorPreview();\n        }\n    }\n\n    // Editor Preview\n    @property(CCBoolean)\n    protected _editorPreview = false;\n\n    @property({\n        displayName: 'Editor Preview (Experimental)',\n        type: CCBoolean,\n    })\n    get editorPreview(): boolean {\n        return this._editorPreview;\n    }\n    set editorPreview(v: boolean) {\n        this._editorPreview = v;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    public _tryEnableEditorPreview(): void {\n        if (rendering === undefined) {\n            return;\n        }\n        if (this._editorPreview) {\n            rendering.setEditorPipelineSettings(this._settings);\n        } else {\n            this._disableEditorPreview();\n        }\n    }\n    public _disableEditorPreview(): void {\n        if (rendering === undefined) {\n            return;\n        }\n        const current = rendering.getEditorPipelineSettings() as PipelineSettings | null;\n        if (current === this._settings) {\n            rendering.setEditorPipelineSettings(null);\n        }\n    }\n\n    // MSAA\n    @property({\n        group: { id: 'MSAA', name: 'Multisample Anti-Aliasing' },\n        type: CCBoolean,\n    })\n    get MsaaEnable(): boolean {\n        return this._settings.msaa.enabled;\n    }\n    set MsaaEnable(value: boolean) {\n        this._settings.msaa.enabled = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n\n    @property({\n        group: { id: 'MSAA', name: 'Multisample Anti-Aliasing', style: 'section' },\n        type: CCInteger,\n        range: [2, 4, 2],\n    })\n    set msaaSampleCount(value: number) {\n        value = 2 ** Math.ceil(Math.log2(Math.max(value, 2)));\n        value = Math.min(value, 4);\n        this._settings.msaa.sampleCount = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get msaaSampleCount(): number {\n        return this._settings.msaa.sampleCount;\n    }\n\n    // Shading Scale\n    @property({\n        group: { id: 'ShadingScale', name: 'ShadingScale', style: 'section' },\n        type: CCBoolean,\n    })\n    set shadingScaleEnable(value: boolean) {\n        this._settings.enableShadingScale = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get shadingScaleEnable(): boolean {\n        return this._settings.enableShadingScale;\n    }\n\n    @property({\n        tooltip: 'i18n:postprocess.shadingScale',\n        group: { id: 'ShadingScale', name: 'ShadingScale' },\n        type: CCFloat,\n        range: [0.01, 4, 0.01],\n        slide: true,\n    })\n    set shadingScale(value: number) {\n        this._settings.shadingScale = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get shadingScale(): number {\n        return this._settings.shadingScale;\n    }\n\n    // Bloom\n    @property({\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\n        type: CCBoolean,\n    })\n    set bloomEnable(value: boolean) {\n        this._settings.bloom.enabled = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get bloomEnable(): boolean {\n        return this._settings.bloom.enabled;\n    }\n\n    @property({\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\n        type: Material,\n    })\n    set bloomMaterial(value: Material) {\n        if (this._settings.bloom.material === value) {\n            return;\n        }\n        this._settings.bloom.material = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get bloomMaterial(): Material {\n        return this._settings.bloom.material!;\n    }\n\n    @property({\n        tooltip: 'i18n:bloom.enableAlphaMask',\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\n        type: CCBoolean,\n    })\n    set bloomEnableAlphaMask(value: boolean) {\n        this._settings.bloom.enableAlphaMask = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get bloomEnableAlphaMask(): boolean {\n        return this._settings.bloom.enableAlphaMask;\n    }\n\n    @property({\n        tooltip: 'i18n:bloom.iterations',\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\n        type: CCInteger,\n        range: [1, 6, 1],\n        slide: true,\n    })\n    set bloomIterations(value: number) {\n        this._settings.bloom.iterations = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get bloomIterations(): number {\n        return this._settings.bloom.iterations;\n    }\n\n    @property({\n        tooltip: 'i18n:bloom.threshold',\n        group: { id: 'Bloom', name: 'Bloom (PostProcessing)', style: 'section' },\n        type: CCFloat,\n        min: 0,\n    })\n    set bloomThreshold(value: number) {\n        this._settings.bloom.threshold = value;\n    }\n    get bloomThreshold(): number {\n        return this._settings.bloom.threshold;\n    }\n\n    set bloomIntensity(value: number) {\n        this._settings.bloom.intensity = value;\n    }\n    get bloomIntensity(): number {\n        return this._settings.bloom.intensity;\n    }\n\n    // Color Grading (LDR)\n    @property({\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\n        type: CCBoolean,\n    })\n    set colorGradingEnable(value: boolean) {\n        this._settings.colorGrading.enabled = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get colorGradingEnable(): boolean {\n        return this._settings.colorGrading.enabled;\n    }\n\n    @property({\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\n        type: Material,\n    })\n    set colorGradingMaterial(value: Material) {\n        if (this._settings.colorGrading.material === value) {\n            return;\n        }\n        this._settings.colorGrading.material = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get colorGradingMaterial(): Material {\n        return this._settings.colorGrading.material!;\n    }\n\n    @property({\n        tooltip: 'i18n:color_grading.contribute',\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\n        type: CCFloat,\n        range: [0, 1, 0.01],\n        slide: true,\n    })\n    set colorGradingContribute(value: number) {\n        this._settings.colorGrading.contribute = value;\n    }\n    get colorGradingContribute(): number {\n        return this._settings.colorGrading.contribute;\n    }\n\n    @property({\n        tooltip: 'i18n:color_grading.originalMap',\n        group: { id: 'Color Grading', name: 'ColorGrading (LDR) (PostProcessing)', style: 'section' },\n        type: Texture2D,\n    })\n    set colorGradingMap(val: Texture2D) {\n        this._settings.colorGrading.colorGradingMap = val;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get colorGradingMap(): Texture2D {\n        return this._settings.colorGrading.colorGradingMap!;\n    }\n\n    // FXAA\n    @property({\n        group: { id: 'FXAA', name: 'Fast Approximate Anti-Aliasing (PostProcessing)', style: 'section' },\n        type: CCBoolean,\n    })\n    set fxaaEnable(value: boolean) {\n        this._settings.fxaa.enabled = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get fxaaEnable(): boolean {\n        return this._settings.fxaa.enabled;\n    }\n\n    @property({\n        group: { id: 'FXAA', name: 'Fast Approximate Anti-Aliasing (PostProcessing)', style: 'section' },\n        type: Material,\n    })\n    set fxaaMaterial(value: Material) {\n        if (this._settings.fxaa.material === value) {\n            return;\n        }\n        this._settings.fxaa.material = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get fxaaMaterial(): Material {\n        return this._settings.fxaa.material!;\n    }\n\n    // FSR\n    @property({\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\n        type: CCBoolean,\n    })\n    set fsrEnable(value: boolean) {\n        this._settings.fsr.enabled = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get fsrEnable(): boolean {\n        return this._settings.fsr.enabled;\n    }\n\n    @property({\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\n        type: Material,\n    })\n    set fsrMaterial(value: Material) {\n        if (this._settings.fsr.material === value) {\n            return;\n        }\n        this._settings.fsr.material = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get fsrMaterial(): Material {\n        return this._settings.fsr.material!;\n    }\n\n    @property({\n        group: { id: 'FSR', name: 'FidelityFX Super Resolution', style: 'section' },\n        type: CCFloat,\n        range: [0, 1, 0.01],\n        slide: true,\n    })\n    set fsrSharpness(value: number) {\n        this._settings.fsr.sharpness = value;\n    }\n    get fsrSharpness(): number {\n        return this._settings.fsr.sharpness;\n    }\n\n    @property({\n        group: { id: 'ToneMapping', name: 'ToneMapping', style: 'section' },\n        type: Material,\n    })\n    set toneMappingMaterial(value: Material) {\n        if (this._settings.toneMapping.material === value) {\n            return;\n        }\n        this._settings.toneMapping.material = value;\n        if (EDITOR) {\n            this._tryEnableEditorPreview();\n        }\n    }\n    get toneMappingMaterial(): Material {\n        return this._settings.toneMapping.material!;\n    }\n}\n","/*\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\n\n https://www.cocos.com\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n of the Software, and to permit persons to whom the Software is furnished to do so,\n subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\n/**\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\n * The following section is auto-generated.\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\n */\n/* eslint-disable max-len */\nimport { Material, Texture2D, gfx } from 'cc';\n\nconst { SampleCount } = gfx;\n\nexport interface MSAA {\n    enabled: boolean; /* false */\n    sampleCount: gfx.SampleCount; /* SampleCount.X4 */\n    [name: string]: unknown;\n}\n\nexport function makeMSAA(): MSAA {\n    return {\n        enabled: false,\n        sampleCount: SampleCount.X4,\n    };\n}\n\nexport function fillRequiredMSAA(value: MSAA): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.sampleCount === undefined) {\n        value.sampleCount = SampleCount.X4;\n    }\n}\n\nexport interface HBAO {\n    enabled: boolean; /* false */\n    radiusScale: number; /* 1 */\n    angleBiasDegree: number; /* 10 */\n    blurSharpness: number; /* 3 */\n    aoSaturation: number; /* 1 */\n    needBlur: boolean; /* false */\n    [name: string]: unknown;\n}\n\nexport function makeHBAO(): HBAO {\n    return {\n        enabled: false,\n        radiusScale: 1,\n        angleBiasDegree: 10,\n        blurSharpness: 3,\n        aoSaturation: 1,\n        needBlur: false,\n    };\n}\n\nexport function fillRequiredHBAO(value: HBAO): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.radiusScale === undefined) {\n        value.radiusScale = 1;\n    }\n    if (value.angleBiasDegree === undefined) {\n        value.angleBiasDegree = 10;\n    }\n    if (value.blurSharpness === undefined) {\n        value.blurSharpness = 3;\n    }\n    if (value.aoSaturation === undefined) {\n        value.aoSaturation = 1;\n    }\n    if (value.needBlur === undefined) {\n        value.needBlur = false;\n    }\n}\n\nexport interface Bloom {\n    enabled: boolean; /* false */\n    /* refcount */ material: Material | null;\n    enableAlphaMask: boolean; /* false */\n    iterations: number; /* 3 */\n    threshold: number; /* 0.8 */\n    intensity: number; /* 2.3 */\n    [name: string]: unknown;\n}\n\nexport function makeBloom(): Bloom {\n    return {\n        enabled: false,\n        material: null,\n        enableAlphaMask: false,\n        iterations: 3,\n        threshold: 0.8,\n        intensity: 2.3,\n    };\n}\n\nexport function fillRequiredBloom(value: Bloom): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.material === undefined) {\n        value.material = null;\n    }\n    if (value.enableAlphaMask === undefined) {\n        value.enableAlphaMask = false;\n    }\n    if (value.iterations === undefined) {\n        value.iterations = 3;\n    }\n    if (value.threshold === undefined) {\n        value.threshold = 0.8;\n    }\n    if (value.intensity === undefined) {\n        value.intensity = 2.3;\n    }\n}\n\nexport interface ColorGrading {\n    enabled: boolean; /* false */\n    /* refcount */ material: Material | null;\n    contribute: number; /* 1 */\n    /* refcount */ colorGradingMap: Texture2D | null;\n    [name: string]: unknown;\n}\n\nexport function makeColorGrading(): ColorGrading {\n    return {\n        enabled: false,\n        material: null,\n        contribute: 1,\n        colorGradingMap: null,\n    };\n}\n\nexport function fillRequiredColorGrading(value: ColorGrading): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.material === undefined) {\n        value.material = null;\n    }\n    if (value.contribute === undefined) {\n        value.contribute = 1;\n    }\n    if (value.colorGradingMap === undefined) {\n        value.colorGradingMap = null;\n    }\n}\n\nexport interface FSR {\n    enabled: boolean; /* false */\n    /* refcount */ material: Material | null;\n    sharpness: number; /* 0.8 */\n    [name: string]: unknown;\n}\n\nexport function makeFSR(): FSR {\n    return {\n        enabled: false,\n        material: null,\n        sharpness: 0.8,\n    };\n}\n\nexport function fillRequiredFSR(value: FSR): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.material === undefined) {\n        value.material = null;\n    }\n    if (value.sharpness === undefined) {\n        value.sharpness = 0.8;\n    }\n}\n\nexport interface FXAA {\n    enabled: boolean; /* false */\n    /* refcount */ material: Material | null;\n    [name: string]: unknown;\n}\n\nexport function makeFXAA(): FXAA {\n    return {\n        enabled: false,\n        material: null,\n    };\n}\n\nexport function fillRequiredFXAA(value: FXAA): void {\n    if (value.enabled === undefined) {\n        value.enabled = false;\n    }\n    if (value.material === undefined) {\n        value.material = null;\n    }\n}\n\nexport interface ToneMapping {\n    /* refcount */ material: Material | null;\n    [name: string]: unknown;\n}\n\nexport function makeToneMapping(): ToneMapping {\n    return {\n        material: null,\n    };\n}\n\nexport function fillRequiredToneMapping(value: ToneMapping): void {\n    if (value.material === undefined) {\n        value.material = null;\n    }\n}\n\nexport interface PipelineSettings {\n    readonly msaa: MSAA;\n    enableShadingScale: boolean; /* false */\n    shadingScale: number; /* 0.5 */\n    readonly bloom: Bloom;\n    readonly toneMapping: ToneMapping;\n    readonly colorGrading: ColorGrading;\n    readonly fsr: FSR;\n    readonly fxaa: FXAA;\n    [name: string]: unknown;\n}\n\nexport function makePipelineSettings(): PipelineSettings {\n    return {\n        msaa: makeMSAA(),\n        enableShadingScale: false,\n        shadingScale: 0.5,\n        bloom: makeBloom(),\n        toneMapping: makeToneMapping(),\n        colorGrading: makeColorGrading(),\n        fsr: makeFSR(),\n        fxaa: makeFXAA(),\n    };\n}\n\nexport function fillRequiredPipelineSettings(value: PipelineSettings): void {\n    if (!value.msaa) {\n        (value.msaa as MSAA) = makeMSAA();\n    } else {\n        fillRequiredMSAA(value.msaa);\n    }\n    if (value.enableShadingScale === undefined) {\n        value.enableShadingScale = false;\n    }\n    if (value.shadingScale === undefined) {\n        value.shadingScale = 0.5;\n    }\n    if (!value.bloom) {\n        (value.bloom as Bloom) = makeBloom();\n    } else {\n        fillRequiredBloom(value.bloom);\n    }\n    if (!value.toneMapping) {\n        (value.toneMapping as ToneMapping) = makeToneMapping();\n    } else {\n        fillRequiredToneMapping(value.toneMapping);\n    }\n    if (!value.colorGrading) {\n        (value.colorGrading as ColorGrading) = makeColorGrading();\n    } else {\n        fillRequiredColorGrading(value.colorGrading);\n    }\n    if (!value.fsr) {\n        (value.fsr as FSR) = makeFSR();\n    } else {\n        fillRequiredFSR(value.fsr);\n    }\n    if (!value.fxaa) {\n        (value.fxaa as FXAA) = makeFXAA();\n    } else {\n        fillRequiredFXAA(value.fxaa);\n    }\n}\n","/*\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\n\n https://www.cocos.com/\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights to\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n of the Software, and to permit persons to whom the Software is furnished to do so,\n subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\nimport {\n    assert, cclegacy, clamp, geometry, gfx, Layers, Material, pipeline,\n    PipelineEventProcessor, PipelineEventType, ReflectionProbeManager, renderer,\n    rendering, sys, Vec2, Vec3, Vec4, warn,\n} from 'cc';\n\nimport { DEBUG, EDITOR } from 'cc/env';\n\nimport {\n    makePipelineSettings,\n    PipelineSettings,\n} from './builtin-pipeline-types';\n\nconst { AABB, Sphere, intersect } = geometry;\nconst { ClearFlagBit, Color, Format, FormatFeatureBit, LoadOp, StoreOp, TextureType, Viewport } = gfx;\nconst { scene } = renderer;\nconst { CameraUsage, CSMLevel, LightType } = scene;\n\nfunction forwardNeedClearColor(camera: renderer.scene.Camera): boolean {\n    return !!(camera.clearFlag & (ClearFlagBit.COLOR | (ClearFlagBit.STENCIL << 1)));\n}\n\nfunction getCsmMainLightViewport(\n    light: renderer.scene.DirectionalLight,\n    w: number,\n    h: number,\n    level: number,\n    vp: gfx.Viewport,\n    screenSpaceSignY: number,\n): void {\n    if (light.shadowFixedArea || light.csmLevel === CSMLevel.LEVEL_1) {\n        vp.left = 0;\n        vp.top = 0;\n        vp.width = Math.trunc(w);\n        vp.height = Math.trunc(h);\n    } else {\n        vp.left = Math.trunc(level % 2 * 0.5 * w);\n        if (screenSpaceSignY > 0) {\n            vp.top = Math.trunc((1 - Math.floor(level / 2)) * 0.5 * h);\n        } else {\n            vp.top = Math.trunc(Math.floor(level / 2) * 0.5 * h);\n        }\n        vp.width = Math.trunc(0.5 * w);\n        vp.height = Math.trunc(0.5 * h);\n    }\n    vp.left = Math.max(0, vp.left);\n    vp.top = Math.max(0, vp.top);\n    vp.width = Math.max(1, vp.width);\n    vp.height = Math.max(1, vp.height);\n}\n\nexport class PipelineConfigs {\n    isWeb = false;\n    isWebGL1 = false;\n    isWebGPU = false;\n    isMobile = false;\n    isHDR = false;\n    useFloatOutput = false;\n    toneMappingType = 0; // 0: ACES, 1: None\n    shadowEnabled = false;\n    shadowMapFormat = Format.R32F;\n    shadowMapSize = new Vec2(1, 1);\n    usePlanarShadow = false;\n    screenSpaceSignY = 1;\n    supportDepthSample = false;\n    mobileMaxSpotLightShadowMaps = 1;\n\n    platform = new Vec4(0, 0, 0, 0);\n}\n\nfunction setupPipelineConfigs(\n    ppl: rendering.BasicPipeline,\n    configs: PipelineConfigs,\n): void {\n    const sampleFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\n    const device = ppl.device;\n    // Platform\n    configs.isWeb = !sys.isNative;\n    configs.isWebGL1 = device.gfxAPI === gfx.API.WEBGL;\n    configs.isWebGPU = device.gfxAPI === gfx.API.WEBGPU;\n    configs.isMobile = sys.isMobile;\n\n    // Rendering\n    configs.isHDR = ppl.pipelineSceneData.isHDR; // Has tone mapping\n    configs.useFloatOutput = ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\n    configs.toneMappingType = ppl.pipelineSceneData.postSettings.toneMappingType;\n    // Shadow\n    const shadowInfo = ppl.pipelineSceneData.shadows;\n    configs.shadowEnabled = shadowInfo.enabled;\n    configs.shadowMapFormat = pipeline.supportsR32FloatTexture(ppl.device) ? Format.R32F : Format.RGBA8;\n    configs.shadowMapSize.set(shadowInfo.size);\n    configs.usePlanarShadow = shadowInfo.enabled && shadowInfo.type === renderer.scene.ShadowType.Planar;\n    // Device\n    configs.screenSpaceSignY = ppl.device.capabilities.screenSpaceSignY;\n    configs.supportDepthSample = (ppl.device.getFormatFeatures(Format.DEPTH_STENCIL) & sampleFeature) === sampleFeature;\n    // Constants\n    const screenSpaceSignY = device.capabilities.screenSpaceSignY;\n    configs.platform.x = configs.isMobile ? 1.0 : 0.0;\n    configs.platform.w = (screenSpaceSignY * 0.5 + 0.5) << 1 | (device.capabilities.clipSpaceSignY * 0.5 + 0.5);\n}\n\nexport interface PipelineSettings2 extends PipelineSettings {\n    _passes?: rendering.PipelinePassBuilder[];\n}\n\nconst defaultSettings = makePipelineSettings();\n\nexport class CameraConfigs {\n    settings: PipelineSettings = defaultSettings;\n    // Window\n    isMainGameWindow = false;\n    renderWindowId = 0;\n    // Camera\n    colorName = '';\n    depthStencilName = '';\n    // Pipeline\n    enableFullPipeline = false;\n    enableProfiler = false;\n    remainingPasses = 0;\n    // Shading Scale\n    enableShadingScale = false;\n    shadingScale = 1.0;\n    nativeWidth = 1;\n    nativeHeight = 1;\n    width = 1; // Scaled width\n    height = 1; // Scaled height\n    // Radiance\n    enableHDR = false;\n    radianceFormat = gfx.Format.RGBA8;\n    // Tone Mapping\n    copyAndTonemapMaterial: Material | null = null;\n    // Depth\n    /** @en mutable */\n    enableStoreSceneDepth = false;\n}\n\nconst sClearColorTransparentBlack = new Color(0, 0, 0, 0);\n\nfunction sortPipelinePassBuildersByConfigOrder(passBuilders: rendering.PipelinePassBuilder[]): void {\n    passBuilders.sort((a, b) => {\n        return a.getConfigOrder() - b.getConfigOrder();\n    });\n}\n\nfunction sortPipelinePassBuildersByRenderOrder(passBuilders: rendering.PipelinePassBuilder[]): void {\n    passBuilders.sort((a, b) => {\n        return a.getRenderOrder() - b.getRenderOrder();\n    });\n}\n\nfunction addCopyToScreenPass(\n    ppl: rendering.BasicPipeline,\n    pplConfigs: Readonly<PipelineConfigs>,\n    cameraConfigs: CameraConfigs,\n    input: string,\n): rendering.BasicRenderPassBuilder {\n    assert(!!cameraConfigs.copyAndTonemapMaterial);\n    const pass = ppl.addRenderPass(\n        cameraConfigs.nativeWidth,\n        cameraConfigs.nativeHeight,\n        'cc-tone-mapping');\n    pass.addRenderTarget(\n        cameraConfigs.colorName,\n        LoadOp.CLEAR, StoreOp.STORE,\n        sClearColorTransparentBlack);\n    pass.addTexture(input, 'inputTexture');\n    pass.setVec4('g_platform', pplConfigs.platform);\n    pass.addQueue(rendering.QueueHint.OPAQUE)\n        .addFullscreenQuad(cameraConfigs.copyAndTonemapMaterial, 1);\n    return pass;\n}\n\nexport function getPingPongRenderTarget(prevName: string, prefix: string, id: number): string {\n    if (prevName.startsWith(prefix)) {\n        return `${prefix}${1 - Number(prevName.charAt(prefix.length))}_${id}`;\n    } else {\n        return `${prefix}0_${id}`;\n    }\n}\n\nexport interface PipelineContext {\n    colorName: string;\n    depthStencilName: string;\n}\n\nclass ForwardLighting {\n    // Active lights\n    private readonly lights: renderer.scene.Light[] = [];\n    // Active spot lights with shadows (Mutually exclusive with `lights`)\n    private readonly shadowEnabledSpotLights: renderer.scene.SpotLight[] = [];\n\n    // Internal cached resources\n    private readonly _sphere = Sphere.create(0, 0, 0, 1);\n    private readonly _boundingBox = new AABB();\n    private readonly _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\n\n    // ----------------------------------------------------------------\n    // Interface\n    // ----------------------------------------------------------------\n    public cullLights(scene: renderer.RenderScene, frustum: geometry.Frustum, cameraPos?: Vec3): void {\n        // TODO(zhouzhenglong): Make light culling native\n        this.lights.length = 0;\n        this.shadowEnabledSpotLights.length = 0;\n        // spot lights\n        for (const light of scene.spotLights) {\n            if (light.baked) {\n                continue;\n            }\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\n                if (light.shadowEnabled) {\n                    this.shadowEnabledSpotLights.push(light);\n                } else {\n                    this.lights.push(light);\n                }\n            }\n        }\n        // sphere lights\n        for (const light of scene.sphereLights) {\n            if (light.baked) {\n                continue;\n            }\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\n                this.lights.push(light);\n            }\n        }\n        // point lights\n        for (const light of scene.pointLights) {\n            if (light.baked) {\n                continue;\n            }\n            Sphere.set(this._sphere, light.position.x, light.position.y, light.position.z, light.range);\n            if (intersect.sphereFrustum(this._sphere, frustum)) {\n                this.lights.push(light);\n            }\n        }\n        // ranged dir lights\n        for (const light of scene.rangedDirLights) {\n            AABB.transform(this._boundingBox, this._rangedDirLightBoundingBox, light.node!.getWorldMatrix());\n            if (intersect.aabbFrustum(this._boundingBox, frustum)) {\n                this.lights.push(light);\n            }\n        }\n\n        if (cameraPos) {\n            this.shadowEnabledSpotLights.sort(\n                (lhs, rhs) => Vec3.squaredDistance(cameraPos, lhs.position) - Vec3.squaredDistance(cameraPos, rhs.position),\n            );\n        }\n    }\n    private _addLightQueues(camera: renderer.scene.Camera, pass: rendering.BasicRenderPassBuilder): void {\n        for (const light of this.lights) {\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\n            switch (light.type) {\n                case LightType.SPHERE:\n                    queue.name = 'sphere-light';\n                    break;\n                case LightType.SPOT:\n                    queue.name = 'spot-light';\n                    break;\n                case LightType.POINT:\n                    queue.name = 'point-light';\n                    break;\n                case LightType.RANGED_DIRECTIONAL:\n                    queue.name = 'ranged-directional-light';\n                    break;\n                default:\n                    queue.name = 'unknown-light';\n            }\n            queue.addScene(\n                camera,\n                rendering.SceneFlags.BLEND,\n                light,\n            );\n        }\n    }\n    public addSpotlightShadowPasses(\n        ppl: rendering.BasicPipeline,\n        camera: renderer.scene.Camera,\n        maxNumShadowMaps: number,\n    ): void {\n        let i = 0;\n        for (const light of this.shadowEnabledSpotLights) {\n            const shadowMapSize = ppl.pipelineSceneData.shadows.size;\n            const shadowPass = ppl.addRenderPass(shadowMapSize.x, shadowMapSize.y, 'default');\n            shadowPass.name = `SpotLightShadowPass${i}`;\n            shadowPass.addRenderTarget(`SpotShadowMap${i}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\n            shadowPass.addDepthStencil(`SpotShadowDepth${i}`, LoadOp.CLEAR, StoreOp.DISCARD);\n            shadowPass.addQueue(rendering.QueueHint.NONE, 'shadow-caster')\n                .addScene(camera, rendering.SceneFlags.OPAQUE | rendering.SceneFlags.MASK | rendering.SceneFlags.SHADOW_CASTER)\n                .useLightFrustum(light);\n            ++i;\n            if (i >= maxNumShadowMaps) {\n                break;\n            }\n        }\n    }\n    public addLightQueues(pass: rendering.BasicRenderPassBuilder,\n        camera: renderer.scene.Camera, maxNumShadowMaps: number): void {\n        this._addLightQueues(camera, pass);\n        let i = 0;\n        for (const light of this.shadowEnabledSpotLights) {\n            // Add spot-light pass\n            // Save last RenderPass to the `pass` variable\n            // TODO(zhouzhenglong): Fix per queue addTexture\n            pass.addTexture(`SpotShadowMap${i}`, 'cc_spotShadowMap');\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\n            queue.addScene(camera, rendering.SceneFlags.BLEND, light);\n            ++i;\n            if (i >= maxNumShadowMaps) {\n                break;\n            }\n        }\n    }\n\n    // Notice: ForwardLighting cannot handle a lot of lights.\n    // If there are too many lights, the performance will be very poor.\n    // If many lights are needed, please implement a forward+ or deferred rendering pipeline.\n    public addLightPasses(\n        colorName: string,\n        depthStencilName: string,\n        depthStencilStoreOp: gfx.StoreOp,\n        id: number, // window id\n        width: number,\n        height: number,\n        camera: renderer.scene.Camera,\n        viewport: gfx.Viewport,\n        ppl: rendering.BasicPipeline,\n        pass: rendering.BasicRenderPassBuilder,\n    ): rendering.BasicRenderPassBuilder {\n        this._addLightQueues(camera, pass);\n\n        let count = 0;\n        const shadowMapSize = ppl.pipelineSceneData.shadows.size;\n        for (const light of this.shadowEnabledSpotLights) {\n            const shadowPass = ppl.addRenderPass(shadowMapSize.x, shadowMapSize.y, 'default');\n            shadowPass.name = 'SpotlightShadowPass';\n            // Reuse csm shadow map\n            shadowPass.addRenderTarget(`ShadowMap${id}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\n            shadowPass.addDepthStencil(`ShadowDepth${id}`, LoadOp.CLEAR, StoreOp.DISCARD);\n            shadowPass.addQueue(rendering.QueueHint.NONE, 'shadow-caster')\n                .addScene(camera, rendering.SceneFlags.OPAQUE | rendering.SceneFlags.MASK | rendering.SceneFlags.SHADOW_CASTER)\n                .useLightFrustum(light);\n\n            // Add spot-light pass\n            // Save last RenderPass to the `pass` variable\n            ++count;\n            const storeOp = count === this.shadowEnabledSpotLights.length\n                ? depthStencilStoreOp\n                : StoreOp.STORE;\n\n            pass = ppl.addRenderPass(width, height, 'default');\n            pass.name = 'SpotlightWithShadowMap';\n            pass.setViewport(viewport);\n            pass.addRenderTarget(colorName, LoadOp.LOAD);\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, storeOp);\n            pass.addTexture(`ShadowMap${id}`, 'cc_spotShadowMap');\n            const queue = pass.addQueue(rendering.QueueHint.BLEND, 'forward-add');\n            queue.addScene(\n                camera,\n                rendering.SceneFlags.BLEND,\n                light,\n            );\n        }\n        return pass;\n    }\n\n    public isMultipleLightPassesNeeded(): boolean {\n        return this.shadowEnabledSpotLights.length > 0;\n    }\n}\n\nexport interface ForwardPassConfigs {\n    enableMainLightShadowMap: boolean;\n    enableMainLightPlanarShadowMap: boolean;\n    enablePlanarReflectionProbe: boolean;\n    enableMSAA: boolean;\n    enableSingleForwardPass: boolean;\n}\n\nexport class BuiltinForwardPassBuilder implements rendering.PipelinePassBuilder {\n    static ConfigOrder = 100;\n    static RenderOrder = 100;\n    getConfigOrder(): number {\n        return BuiltinForwardPassBuilder.ConfigOrder;\n    }\n    getRenderOrder(): number {\n        return BuiltinForwardPassBuilder.RenderOrder;\n    }\n    configCamera(\n        camera: Readonly<renderer.scene.Camera>,\n        pipelineConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ForwardPassConfigs): void {\n        // Shadow\n        cameraConfigs.enableMainLightShadowMap = pipelineConfigs.shadowEnabled\n            && !pipelineConfigs.usePlanarShadow\n            && !!camera.scene\n            && !!camera.scene.mainLight\n            && camera.scene.mainLight.shadowEnabled;\n\n        cameraConfigs.enableMainLightPlanarShadowMap = pipelineConfigs.shadowEnabled\n            && pipelineConfigs.usePlanarShadow\n            && !!camera.scene\n            && !!camera.scene.mainLight\n            && camera.scene.mainLight.shadowEnabled;\n\n        // Reflection Probe\n        cameraConfigs.enablePlanarReflectionProbe =\n            cameraConfigs.isMainGameWindow || camera.cameraUsage === CameraUsage.SCENE_VIEW;\n\n        // MSAA\n        cameraConfigs.enableMSAA = cameraConfigs.settings.msaa.enabled\n            && !cameraConfigs.enableStoreSceneDepth // Cannot store MS depth, resolve depth is also not cross-platform\n            && !pipelineConfigs.isWeb // TODO(zhouzhenglong): remove this constraint\n            && !pipelineConfigs.isWebGL1;\n\n        // Forward rendering (Depend on MSAA and TBR)\n        cameraConfigs.enableSingleForwardPass\n            = pipelineConfigs.isMobile || cameraConfigs.enableMSAA;\n\n        ++cameraConfigs.remainingPasses;\n    }\n    windowResize(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        window: renderer.RenderWindow,\n        camera: renderer.scene.Camera,\n        nativeWidth: number,\n        nativeHeight: number): void {\n        const ResourceFlags = rendering.ResourceFlags;\n        const ResourceResidency = rendering.ResourceResidency;\n        const id = window.renderWindowId;\n        const settings = cameraConfigs.settings;\n\n        const width = cameraConfigs.enableShadingScale\n            ? Math.max(Math.floor(nativeWidth * cameraConfigs.shadingScale), 1)\n            : nativeWidth;\n        const height = cameraConfigs.enableShadingScale\n            ? Math.max(Math.floor(nativeHeight * cameraConfigs.shadingScale), 1)\n            : nativeHeight;\n\n        // MsaaRadiance\n        if (cameraConfigs.enableMSAA) {\n            // Notice: We never store multisample results.\n            // These samples are always resolved and discarded at the end of the render pass.\n            // So the ResourceResidency should be MEMORYLESS.\n            if (cameraConfigs.enableHDR) {\n                ppl.addTexture(`MsaaRadiance${id}`, TextureType.TEX2D, cameraConfigs.radianceFormat, width, height, 1, 1, 1,\n                    settings.msaa.sampleCount, ResourceFlags.COLOR_ATTACHMENT, ResourceResidency.MEMORYLESS);\n            } else {\n                ppl.addTexture(`MsaaRadiance${id}`, TextureType.TEX2D, Format.RGBA8, width, height, 1, 1, 1,\n                    settings.msaa.sampleCount, ResourceFlags.COLOR_ATTACHMENT, ResourceResidency.MEMORYLESS);\n            }\n            ppl.addTexture(`MsaaDepthStencil${id}`, TextureType.TEX2D, Format.DEPTH_STENCIL, width, height, 1, 1, 1,\n                settings.msaa.sampleCount, ResourceFlags.DEPTH_STENCIL_ATTACHMENT, ResourceResidency.MEMORYLESS);\n        }\n\n        // Mainlight ShadowMap\n        ppl.addRenderTarget(\n            `ShadowMap${id}`,\n            pplConfigs.shadowMapFormat,\n            pplConfigs.shadowMapSize.x,\n            pplConfigs.shadowMapSize.y,\n        );\n        ppl.addDepthStencil(\n            `ShadowDepth${id}`,\n            Format.DEPTH_STENCIL,\n            pplConfigs.shadowMapSize.x,\n            pplConfigs.shadowMapSize.y,\n        );\n\n        // Spot-light shadow maps\n        if (cameraConfigs.enableSingleForwardPass) {\n            const count = pplConfigs.mobileMaxSpotLightShadowMaps;\n            for (let i = 0; i !== count; ++i) {\n                ppl.addRenderTarget(\n                    `SpotShadowMap${i}`,\n                    pplConfigs.shadowMapFormat,\n                    pplConfigs.shadowMapSize.x,\n                    pplConfigs.shadowMapSize.y,\n                );\n                ppl.addDepthStencil(\n                    `SpotShadowDepth${i}`,\n                    Format.DEPTH_STENCIL,\n                    pplConfigs.shadowMapSize.x,\n                    pplConfigs.shadowMapSize.y,\n                );\n            }\n        }\n    }\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ForwardPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext): rendering.BasicRenderPassBuilder | undefined {\n        const id = camera.window.renderWindowId;\n\n        const scene = camera.scene!;\n        const mainLight = scene.mainLight;\n\n        --cameraConfigs.remainingPasses;\n        assert(cameraConfigs.remainingPasses >= 0);\n\n        // Forward Lighting (Light Culling)\n        this.forwardLighting.cullLights(scene, camera.frustum);\n\n        // Main Directional light CSM Shadow Map\n        if (cameraConfigs.enableMainLightShadowMap) {\n            assert(!!mainLight);\n            this._addCascadedShadowMapPass(ppl, pplConfigs, id, mainLight, camera);\n        }\n\n        // Spot light shadow maps (Mobile or MSAA)\n        if (cameraConfigs.enableSingleForwardPass) {\n            // Currently, only support 1 spot light with shadow map on mobile platform.\n            // TODO(zhouzhenglong): Relex this limitation.\n            this.forwardLighting.addSpotlightShadowPasses(\n                ppl, camera, pplConfigs.mobileMaxSpotLightShadowMaps);\n        }\n\n        this._tryAddReflectionProbePasses(ppl, cameraConfigs, id, mainLight, camera.scene);\n\n        if (cameraConfigs.remainingPasses > 0 || cameraConfigs.enableShadingScale) {\n            context.colorName = cameraConfigs.enableShadingScale\n                ? `ScaledRadiance0_${id}`\n                : `Radiance0_${id}`;\n            context.depthStencilName = cameraConfigs.enableShadingScale\n                ? `ScaledSceneDepth_${id}`\n                : `SceneDepth_${id}`;\n        } else {\n            context.colorName = cameraConfigs.colorName;\n            context.depthStencilName = cameraConfigs.depthStencilName;\n        }\n\n        const pass = this._addForwardRadiancePasses(\n            ppl, pplConfigs, cameraConfigs, id, camera,\n            cameraConfigs.width, cameraConfigs.height, mainLight,\n            context.colorName, context.depthStencilName,\n            !cameraConfigs.enableMSAA,\n            cameraConfigs.enableStoreSceneDepth ? StoreOp.STORE : StoreOp.DISCARD);\n\n        if (!cameraConfigs.enableStoreSceneDepth) {\n            context.depthStencilName = '';\n        }\n\n        if (cameraConfigs.remainingPasses === 0 && cameraConfigs.enableShadingScale) {\n            return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, context.colorName);\n        } else {\n            return pass;\n        }\n    }\n    private _addCascadedShadowMapPass(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        id: number,\n        light: renderer.scene.DirectionalLight,\n        camera: renderer.scene.Camera,\n    ): void {\n        const QueueHint = rendering.QueueHint;\n        const SceneFlags = rendering.SceneFlags;\n        // ----------------------------------------------------------------\n        // Dynamic states\n        // ----------------------------------------------------------------\n        const shadowSize = ppl.pipelineSceneData.shadows.size;\n        const width = shadowSize.x;\n        const height = shadowSize.y;\n\n        const viewport = this._viewport;\n        viewport.left = viewport.top = 0;\n        viewport.width = width;\n        viewport.height = height;\n\n        // ----------------------------------------------------------------\n        // CSM Shadow Map\n        // ----------------------------------------------------------------\n        const pass = ppl.addRenderPass(width, height, 'default');\n        pass.name = 'CascadedShadowMap';\n        pass.addRenderTarget(`ShadowMap${id}`, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, 1));\n        pass.addDepthStencil(`ShadowDepth${id}`, LoadOp.CLEAR, StoreOp.DISCARD);\n        const csmLevel = ppl.pipelineSceneData.csmSupported ? light.csmLevel : 1;\n\n        // Add shadow map viewports\n        for (let level = 0; level !== csmLevel; ++level) {\n            getCsmMainLightViewport(light, width, height, level, this._viewport, pplConfigs.screenSpaceSignY);\n            const queue = pass.addQueue(QueueHint.NONE, 'shadow-caster');\n            if (!pplConfigs.isWebGPU) { // Temporary workaround for WebGPU\n                queue.setViewport(this._viewport);\n            }\n            queue\n                .addScene(camera, SceneFlags.OPAQUE | SceneFlags.MASK | SceneFlags.SHADOW_CASTER)\n                .useLightFrustum(light, level);\n        }\n    }\n    private _tryAddReflectionProbePasses(\n        ppl: rendering.BasicPipeline,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        mainLight: renderer.scene.DirectionalLight | null,\n        scene: renderer.RenderScene | null,\n    ): void {\n        const reflectionProbeManager = cclegacy.internal.reflectionProbeManager as ReflectionProbeManager | undefined;\n        if (!reflectionProbeManager) {\n            return;\n        }\n        const ResourceResidency = rendering.ResourceResidency;\n        const probes = reflectionProbeManager.getProbes();\n        const maxProbeCount = 4;\n        let probeID = 0;\n        for (const probe of probes) {\n            if (!probe.needRender) {\n                continue;\n            }\n            const area = probe.renderArea();\n            const width = Math.max(Math.floor(area.x), 1);\n            const height = Math.max(Math.floor(area.y), 1);\n\n            if (probe.probeType === renderer.scene.ProbeType.PLANAR) {\n                if (!cameraConfigs.enablePlanarReflectionProbe) {\n                    continue;\n                }\n                const window: renderer.RenderWindow = probe.realtimePlanarTexture!.window!;\n                const colorName = `PlanarProbeRT${probeID}`;\n                const depthStencilName = `PlanarProbeDS${probeID}`;\n                // ProbeResource\n                ppl.addRenderWindow(colorName,\n                    cameraConfigs.radianceFormat, width, height, window);\n                ppl.addDepthStencil(depthStencilName,\n                    gfx.Format.DEPTH_STENCIL, width, height, ResourceResidency.MEMORYLESS);\n\n                // Rendering\n                const probePass = ppl.addRenderPass(width, height, 'default');\n                probePass.name = `PlanarReflectionProbe${probeID}`;\n                this._buildReflectionProbePass(probePass, cameraConfigs, id, probe.camera,\n                    colorName, depthStencilName, mainLight, scene);\n            } else if (EDITOR) {\n                for (let faceIdx = 0; faceIdx < probe.bakedCubeTextures.length; faceIdx++) {\n                    probe.updateCameraDir(faceIdx);\n                    const window: renderer.RenderWindow = probe.bakedCubeTextures[faceIdx].window!;\n                    const colorName = `CubeProbeRT${probeID}${faceIdx}`;\n                    const depthStencilName = `CubeProbeDS${probeID}${faceIdx}`;\n                    // ProbeResource\n                    ppl.addRenderWindow(colorName,\n                        cameraConfigs.radianceFormat, width, height, window);\n                    ppl.addDepthStencil(depthStencilName,\n                        gfx.Format.DEPTH_STENCIL, width, height, ResourceResidency.MEMORYLESS);\n\n                    // Rendering\n                    const probePass = ppl.addRenderPass(width, height, 'default');\n                    probePass.name = `CubeProbe${probeID}${faceIdx}`;\n                    this._buildReflectionProbePass(probePass, cameraConfigs, id, probe.camera,\n                        colorName, depthStencilName, mainLight, scene);\n                }\n                probe.needRender = false;\n            }\n            ++probeID;\n            if (probeID === maxProbeCount) {\n                break;\n            }\n        }\n    }\n    private _buildReflectionProbePass(\n        pass: rendering.BasicRenderPassBuilder,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        camera: renderer.scene.Camera,\n        colorName: string,\n        depthStencilName: string,\n        mainLight: renderer.scene.DirectionalLight | null,\n        scene: renderer.RenderScene | null = null,\n    ): void {\n        const QueueHint = rendering.QueueHint;\n        const SceneFlags = rendering.SceneFlags;\n        // set viewport\n        const colorStoreOp = cameraConfigs.enableMSAA ? StoreOp.DISCARD : StoreOp.STORE;\n\n        // bind output render target\n        if (forwardNeedClearColor(camera)) {\n            this._reflectionProbeClearColor.x = camera.clearColor.x;\n            this._reflectionProbeClearColor.y = camera.clearColor.y;\n            this._reflectionProbeClearColor.z = camera.clearColor.z;\n            const clearColor = rendering.packRGBE(this._reflectionProbeClearColor);\n            this._clearColor.x = clearColor.x;\n            this._clearColor.y = clearColor.y;\n            this._clearColor.z = clearColor.z;\n            this._clearColor.w = clearColor.w;\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, colorStoreOp, this._clearColor);\n        } else {\n            pass.addRenderTarget(colorName, LoadOp.LOAD, colorStoreOp);\n        }\n\n        // bind depth stencil buffer\n        if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\n            pass.addDepthStencil(\n                depthStencilName,\n                LoadOp.CLEAR,\n                StoreOp.DISCARD,\n                camera.clearDepth,\n                camera.clearStencil,\n                camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\n            );\n        } else {\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, StoreOp.DISCARD);\n        }\n\n        // Set shadow map if enabled\n        if (cameraConfigs.enableMainLightShadowMap) {\n            pass.addTexture(`ShadowMap${id}`, 'cc_shadowMap');\n        }\n\n        // TODO(zhouzhenglong): Separate OPAQUE and MASK queue\n\n        // add opaque and mask queue\n        pass.addQueue(QueueHint.NONE, 'reflect-map') // Currently we put OPAQUE and MASK into one queue, so QueueHint is NONE\n            .addScene(camera,\n                SceneFlags.OPAQUE | SceneFlags.MASK | SceneFlags.REFLECTION_PROBE,\n                mainLight || undefined,\n                scene ? scene : undefined);\n    }\n    private _addForwardRadiancePasses(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        camera: renderer.scene.Camera,\n        width: number,\n        height: number,\n        mainLight: renderer.scene.DirectionalLight | null,\n        colorName: string,\n        depthStencilName: string,\n        disableMSAA: boolean = false,\n        depthStencilStoreOp: gfx.StoreOp = StoreOp.DISCARD,\n    ): rendering.BasicRenderPassBuilder {\n        const QueueHint = rendering.QueueHint;\n        const SceneFlags = rendering.SceneFlags;\n        // ----------------------------------------------------------------\n        // Dynamic states\n        // ----------------------------------------------------------------\n        // Prepare camera clear color\n        const clearColor = camera.clearColor; // Reduce C++/TS interop\n        this._clearColor.x = clearColor.x;\n        this._clearColor.y = clearColor.y;\n        this._clearColor.z = clearColor.z;\n        this._clearColor.w = clearColor.w;\n\n        // Prepare camera viewport\n        const viewport = camera.viewport; // Reduce C++/TS interop\n        this._viewport.left = Math.round(viewport.x * width);\n        this._viewport.top = Math.round(viewport.y * height);\n        // Here we must use camera.viewport.width instead of camera.viewport.z, which\n        // is undefined on native platform. The same as camera.viewport.height.\n        this._viewport.width = Math.max(Math.round(viewport.width * width), 1);\n        this._viewport.height = Math.max(Math.round(viewport.height * height), 1);\n\n        // MSAA\n        const enableMSAA = !disableMSAA && cameraConfigs.enableMSAA;\n        assert(!enableMSAA || cameraConfigs.enableSingleForwardPass);\n\n        // ----------------------------------------------------------------\n        // Forward Lighting (Main Directional Light)\n        // ----------------------------------------------------------------\n        const pass = cameraConfigs.enableSingleForwardPass\n            ? this._addForwardSingleRadiancePass(ppl, pplConfigs, cameraConfigs,\n                id, camera, enableMSAA, width, height, mainLight,\n                colorName, depthStencilName, depthStencilStoreOp)\n            : this._addForwardMultipleRadiancePasses(ppl, cameraConfigs,\n                id, camera, width, height, mainLight,\n                colorName, depthStencilName, depthStencilStoreOp);\n\n        // Planar Shadow\n        if (cameraConfigs.enableMainLightPlanarShadowMap) {\n            this._addPlanarShadowQueue(camera, mainLight, pass);\n        }\n\n        // ----------------------------------------------------------------\n        // Forward Lighting (Blend)\n        // ----------------------------------------------------------------\n        // Add transparent queue\n\n        const sceneFlags = SceneFlags.BLEND |\n            (camera.geometryRenderer\n                ? SceneFlags.GEOMETRY\n                : SceneFlags.NONE);\n\n        pass\n            .addQueue(QueueHint.BLEND)\n            .addScene(camera, sceneFlags, mainLight || undefined);\n\n        return pass;\n    }\n    private _addForwardSingleRadiancePass(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        camera: renderer.scene.Camera,\n        enableMSAA: boolean,\n        width: number,\n        height: number,\n        mainLight: renderer.scene.DirectionalLight | null,\n        colorName: string,\n        depthStencilName: string,\n        depthStencilStoreOp: gfx.StoreOp\n    ): rendering.BasicRenderPassBuilder {\n        assert(cameraConfigs.enableSingleForwardPass);\n        // ----------------------------------------------------------------\n        // Forward Lighting (Main Directional Light)\n        // ----------------------------------------------------------------\n        let pass: rendering.BasicRenderPassBuilder;\n        if (enableMSAA) {\n            const msaaRadianceName = `MsaaRadiance${id}`;\n            const msaaDepthStencilName = `MsaaDepthStencil${id}`;\n            const sampleCount = cameraConfigs.settings.msaa.sampleCount;\n\n            const msPass = ppl.addMultisampleRenderPass(width, height, sampleCount, 0, 'default');\n            msPass.name = 'MsaaForwardPass';\n\n            // MSAA always discards depth stencil\n            this._buildForwardMainLightPass(msPass, cameraConfigs, id, camera,\n                msaaRadianceName, msaaDepthStencilName, StoreOp.DISCARD, mainLight);\n\n            msPass.resolveRenderTarget(msaaRadianceName, colorName);\n\n            pass = msPass;\n        } else {\n            pass = ppl.addRenderPass(width, height, 'default');\n            pass.name = 'ForwardPass';\n\n            this._buildForwardMainLightPass(pass, cameraConfigs, id, camera,\n                colorName, depthStencilName, depthStencilStoreOp, mainLight);\n        }\n        assert(pass !== undefined);\n\n        // Forward Lighting (Additive Lights)\n        this.forwardLighting.addLightQueues(\n            pass,\n            camera,\n            pplConfigs.mobileMaxSpotLightShadowMaps,\n        );\n\n        return pass;\n    }\n    private _addForwardMultipleRadiancePasses(\n        ppl: rendering.BasicPipeline,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        camera: renderer.scene.Camera,\n        width: number,\n        height: number,\n        mainLight: renderer.scene.DirectionalLight | null,\n        colorName: string,\n        depthStencilName: string,\n        depthStencilStoreOp: gfx.StoreOp\n    ): rendering.BasicRenderPassBuilder {\n        assert(!cameraConfigs.enableSingleForwardPass);\n\n        // Forward Lighting (Main Directional Light)\n        let pass = ppl.addRenderPass(width, height, 'default');\n        pass.name = 'ForwardPass';\n\n        const firstStoreOp = this.forwardLighting.isMultipleLightPassesNeeded()\n            ? StoreOp.STORE\n            : depthStencilStoreOp;\n\n        this._buildForwardMainLightPass(pass, cameraConfigs,\n            id, camera, colorName, depthStencilName, firstStoreOp, mainLight);\n\n        // Forward Lighting (Additive Lights)\n        pass = this.forwardLighting\n            .addLightPasses(colorName, depthStencilName, depthStencilStoreOp,\n                id, width, height, camera, this._viewport, ppl, pass);\n\n        return pass;\n    }\n    private _buildForwardMainLightPass(\n        pass: rendering.BasicRenderPassBuilder,\n        cameraConfigs: Readonly<CameraConfigs & ForwardPassConfigs>,\n        id: number,\n        camera: renderer.scene.Camera,\n        colorName: string,\n        depthStencilName: string,\n        depthStencilStoreOp: gfx.StoreOp,\n        mainLight: renderer.scene.DirectionalLight | null,\n        scene: renderer.RenderScene | null = null,\n    ): void {\n        const QueueHint = rendering.QueueHint;\n        const SceneFlags = rendering.SceneFlags;\n        // set viewport\n        pass.setViewport(this._viewport);\n\n        const colorStoreOp = cameraConfigs.enableMSAA ? StoreOp.DISCARD : StoreOp.STORE;\n\n        // bind output render target\n        if (forwardNeedClearColor(camera)) {\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, colorStoreOp, this._clearColor);\n        } else {\n            pass.addRenderTarget(colorName, LoadOp.LOAD, colorStoreOp);\n        }\n\n        // bind depth stencil buffer\n        if (DEBUG) {\n            if (colorName === cameraConfigs.colorName &&\n                depthStencilName !== cameraConfigs.depthStencilName) {\n                warn('Default framebuffer cannot use custom depth stencil buffer');\n            }\n        }\n\n        if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\n            pass.addDepthStencil(\n                depthStencilName,\n                LoadOp.CLEAR,\n                depthStencilStoreOp,\n                camera.clearDepth,\n                camera.clearStencil,\n                camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\n            );\n        } else {\n            pass.addDepthStencil(depthStencilName, LoadOp.LOAD, depthStencilStoreOp);\n        }\n\n        // Set shadow map if enabled\n        if (cameraConfigs.enableMainLightShadowMap) {\n            pass.addTexture(`ShadowMap${id}`, 'cc_shadowMap');\n        }\n\n        // TODO(zhouzhenglong): Separate OPAQUE and MASK queue\n\n        // add opaque and mask queue\n        pass.addQueue(QueueHint.NONE) // Currently we put OPAQUE and MASK into one queue, so QueueHint is NONE\n            .addScene(camera,\n                SceneFlags.OPAQUE | SceneFlags.MASK,\n                mainLight || undefined,\n                scene ? scene : undefined);\n    }\n    private _addPlanarShadowQueue(\n        camera: renderer.scene.Camera,\n        mainLight: renderer.scene.DirectionalLight | null,\n        pass: rendering.BasicRenderPassBuilder,\n    ) {\n        const QueueHint = rendering.QueueHint;\n        const SceneFlags = rendering.SceneFlags;\n        pass.addQueue(QueueHint.BLEND, 'planar-shadow')\n            .addScene(\n                camera,\n                SceneFlags.SHADOW_CASTER | SceneFlags.PLANAR_SHADOW | SceneFlags.BLEND,\n                mainLight || undefined,\n            );\n    }\n    private readonly forwardLighting = new ForwardLighting();\n    private readonly _viewport = new Viewport();\n    private readonly _clearColor = new Color(0, 0, 0, 1);\n    private readonly _reflectionProbeClearColor = new Vec3(0, 0, 0);\n}\n\nexport interface BloomPassConfigs {\n    enableBloom: boolean;\n}\n\nexport class BuiltinBloomPassBuilder implements rendering.PipelinePassBuilder {\n    getConfigOrder(): number {\n        return 0;\n    }\n    getRenderOrder(): number {\n        return 200;\n    }\n    configCamera(\n        camera: Readonly<renderer.scene.Camera>,\n        pipelineConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & BloomPassConfigs): void {\n        cameraConfigs.enableBloom\n            = cameraConfigs.settings.bloom.enabled\n            && !!cameraConfigs.settings.bloom.material;\n        if (cameraConfigs.enableBloom) {\n            ++cameraConfigs.remainingPasses;\n        }\n    }\n    windowResize(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & BloomPassConfigs,\n        window: renderer.RenderWindow): void {\n        if (cameraConfigs.enableBloom) {\n            const id = window.renderWindowId;\n            let bloomWidth = cameraConfigs.width;\n            let bloomHeight = cameraConfigs.height;\n            for (let i = 0; i !== cameraConfigs.settings.bloom.iterations + 1; ++i) {\n                bloomWidth = Math.max(Math.floor(bloomWidth / 2), 1);\n                bloomHeight = Math.max(Math.floor(bloomHeight / 2), 1);\n                ppl.addRenderTarget(`BloomTex${id}_${i}`,\n                    cameraConfigs.radianceFormat, bloomWidth, bloomHeight);\n            }\n        }\n    }\n\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & BloomPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext,\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\n        : rendering.BasicRenderPassBuilder | undefined {\n        if (!cameraConfigs.enableBloom) {\n            return prevRenderPass;\n        }\n\n        --cameraConfigs.remainingPasses;\n        assert(cameraConfigs.remainingPasses >= 0);\n        const id = camera.window.renderWindowId;\n        assert(!!cameraConfigs.settings.bloom.material);\n        return this._addKawaseDualFilterBloomPasses(\n            ppl, pplConfigs,\n            cameraConfigs,\n            cameraConfigs.settings,\n            cameraConfigs.settings.bloom.material,\n            id,\n            cameraConfigs.width,\n            cameraConfigs.height,\n            context.colorName);\n    }\n\n    private _addKawaseDualFilterBloomPasses(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & Readonly<BloomPassConfigs>,\n        settings: PipelineSettings,\n        bloomMaterial: Material,\n        id: number,\n        width: number,\n        height: number,\n        radianceName: string,\n    ): rendering.BasicRenderPassBuilder {\n        const QueueHint = rendering.QueueHint;\n        // Based on Kawase Dual Filter Blur. Saves bandwidth on mobile devices.\n        // eslint-disable-next-line max-len\n        // https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_slides.pdf\n\n        // Size: [prefilter(1/2), downsample(1/4), downsample(1/8), downsample(1/16), ...]\n        const iterations = settings.bloom.iterations;\n        const sizeCount = iterations + 1;\n        this._bloomWidths.length = sizeCount;\n        this._bloomHeights.length = sizeCount;\n        this._bloomWidths[0] = Math.max(Math.floor(width / 2), 1);\n        this._bloomHeights[0] = Math.max(Math.floor(height / 2), 1);\n        for (let i = 1; i !== sizeCount; ++i) {\n            this._bloomWidths[i] = Math.max(Math.floor(this._bloomWidths[i - 1] / 2), 1);\n            this._bloomHeights[i] = Math.max(Math.floor(this._bloomHeights[i - 1] / 2), 1);\n        }\n\n        // Bloom texture names\n        this._bloomTexNames.length = sizeCount;\n        for (let i = 0; i !== sizeCount; ++i) {\n            this._bloomTexNames[i] = `BloomTex${id}_${i}`;\n        }\n\n        // Setup bloom parameters\n        this._bloomParams.x = pplConfigs.useFloatOutput ? 1 : 0;\n        this._bloomParams.x = 0; // unused\n        this._bloomParams.z = settings.bloom.threshold;\n        this._bloomParams.w = settings.bloom.enableAlphaMask ? 1 : 0;\n\n        // Prefilter pass\n        const prefilterPass = ppl.addRenderPass(this._bloomWidths[0], this._bloomHeights[0], 'cc-bloom-prefilter');\n        prefilterPass.addRenderTarget(\n            this._bloomTexNames[0],\n            LoadOp.CLEAR,\n            StoreOp.STORE,\n            this._clearColorTransparentBlack,\n        );\n        prefilterPass.addTexture(radianceName, 'inputTexture');\n        prefilterPass.setVec4('g_platform', pplConfigs.platform);\n        prefilterPass.setVec4('bloomParams', this._bloomParams);\n        prefilterPass\n            .addQueue(QueueHint.OPAQUE)\n            .addFullscreenQuad(bloomMaterial, 0);\n\n        // Downsample passes\n        for (let i = 1; i !== sizeCount; ++i) {\n            const downPass = ppl.addRenderPass(this._bloomWidths[i], this._bloomHeights[i], 'cc-bloom-downsample');\n            downPass.addRenderTarget(this._bloomTexNames[i], LoadOp.CLEAR, StoreOp.STORE, this._clearColorTransparentBlack);\n            downPass.addTexture(this._bloomTexNames[i - 1], 'bloomTexture');\n            this._bloomTexSize.x = this._bloomWidths[i - 1];\n            this._bloomTexSize.y = this._bloomHeights[i - 1];\n            downPass.setVec4('g_platform', pplConfigs.platform);\n            downPass.setVec4('bloomTexSize', this._bloomTexSize);\n            downPass\n                .addQueue(QueueHint.OPAQUE)\n                .addFullscreenQuad(bloomMaterial, 1);\n        }\n\n        // Upsample passes\n        for (let i = iterations; i-- > 0;) {\n            const upPass = ppl.addRenderPass(this._bloomWidths[i], this._bloomHeights[i], 'cc-bloom-upsample');\n            upPass.addRenderTarget(this._bloomTexNames[i], LoadOp.CLEAR, StoreOp.STORE, this._clearColorTransparentBlack);\n            upPass.addTexture(this._bloomTexNames[i + 1], 'bloomTexture');\n            this._bloomTexSize.x = this._bloomWidths[i + 1];\n            this._bloomTexSize.y = this._bloomHeights[i + 1];\n            upPass.setVec4('g_platform', pplConfigs.platform);\n            upPass.setVec4('bloomTexSize', this._bloomTexSize);\n            upPass\n                .addQueue(QueueHint.OPAQUE)\n                .addFullscreenQuad(bloomMaterial, 2);\n        }\n\n        // Combine pass\n        const combinePass = ppl.addRenderPass(width, height, 'cc-bloom-combine');\n        combinePass.addRenderTarget(radianceName, LoadOp.LOAD, StoreOp.STORE);\n        combinePass.addTexture(this._bloomTexNames[0], 'bloomTexture');\n        combinePass.setVec4('g_platform', pplConfigs.platform);\n        combinePass.setVec4('bloomParams', this._bloomParams);\n        combinePass\n            .addQueue(QueueHint.BLEND)\n            .addFullscreenQuad(bloomMaterial, 3);\n\n        if (cameraConfigs.remainingPasses === 0) {\n            return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, radianceName);\n        } else {\n            return combinePass;\n        }\n    }\n    // Bloom\n    private readonly _clearColorTransparentBlack = new Color(0, 0, 0, 0);\n    private readonly _bloomParams = new Vec4(0, 0, 0, 0);\n    private readonly _bloomTexSize = new Vec4(0, 0, 0, 0);\n    private readonly _bloomWidths: Array<number> = [];\n    private readonly _bloomHeights: Array<number> = [];\n    private readonly _bloomTexNames: Array<string> = [];\n}\n\nexport interface ToneMappingPassConfigs {\n    enableToneMapping: boolean;\n    enableColorGrading: boolean;\n}\n\nexport class BuiltinToneMappingPassBuilder implements rendering.PipelinePassBuilder {\n    getConfigOrder(): number {\n        return 0;\n    }\n    getRenderOrder(): number {\n        return 300;\n    }\n    configCamera(\n        camera: Readonly<renderer.scene.Camera>,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs): void {\n        const settings = cameraConfigs.settings;\n\n        cameraConfigs.enableColorGrading\n            = settings.colorGrading.enabled\n            && !!settings.colorGrading.material\n            && !!settings.colorGrading.colorGradingMap;\n\n        cameraConfigs.enableToneMapping\n            = cameraConfigs.enableHDR // From Half to RGBA8\n            || cameraConfigs.enableColorGrading; // Color grading\n\n        if (cameraConfigs.enableToneMapping) {\n            ++cameraConfigs.remainingPasses;\n        }\n    }\n    windowResize(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs): void {\n        if (cameraConfigs.enableColorGrading) {\n            assert(!!cameraConfigs.settings.colorGrading.material);\n            cameraConfigs.settings.colorGrading.material.setProperty(\n                'colorGradingMap',\n                cameraConfigs.settings.colorGrading.colorGradingMap);\n        }\n    }\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext,\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\n        : rendering.BasicRenderPassBuilder | undefined {\n        if (!cameraConfigs.enableToneMapping) {\n            return prevRenderPass;\n        }\n\n        --cameraConfigs.remainingPasses;\n        assert(cameraConfigs.remainingPasses >= 0);\n        if (cameraConfigs.remainingPasses === 0) {\n            return this._addCopyAndTonemapPass(ppl, pplConfigs, cameraConfigs,\n                cameraConfigs.nativeWidth, cameraConfigs.nativeHeight,\n                context.colorName, cameraConfigs.colorName);\n        } else {\n            const id = cameraConfigs.renderWindowId;\n            const ldrColorPrefix = cameraConfigs.enableShadingScale\n                ? `ScaledLdrColor`\n                : `LdrColor`;\n\n            const ldrColorName = getPingPongRenderTarget(context.colorName, ldrColorPrefix, id);\n            const radianceName = context.colorName;\n            context.colorName = ldrColorName;\n\n            return this._addCopyAndTonemapPass(ppl, pplConfigs, cameraConfigs,\n                cameraConfigs.width, cameraConfigs.height,\n                radianceName, ldrColorName);\n        }\n    }\n    private _addCopyAndTonemapPass(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & ToneMappingPassConfigs,\n        width: number,\n        height: number,\n        radianceName: string,\n        colorName: string,\n    ): rendering.BasicRenderPassBuilder {\n        let pass: rendering.BasicRenderPassBuilder;\n        const settings = cameraConfigs.settings;\n        if (cameraConfigs.enableColorGrading) {\n            assert(!!settings.colorGrading.material);\n            assert(!!settings.colorGrading.colorGradingMap);\n\n            const lutTex = settings.colorGrading.colorGradingMap;\n            this._colorGradingTexSize.x = lutTex.width;\n            this._colorGradingTexSize.y = lutTex.height;\n\n            const isSquareMap = lutTex.width === lutTex.height;\n            if (isSquareMap) {\n                pass = ppl.addRenderPass(width, height, 'cc-color-grading-8x8');\n            } else {\n                pass = ppl.addRenderPass(width, height, 'cc-color-grading-nx1');\n            }\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\n            pass.addTexture(radianceName, 'sceneColorMap');\n            pass.setVec4('g_platform', pplConfigs.platform);\n            pass.setVec2('lutTextureSize', this._colorGradingTexSize);\n            pass.setFloat('contribute', settings.colorGrading.contribute);\n            pass.addQueue(rendering.QueueHint.OPAQUE)\n                .addFullscreenQuad(settings.colorGrading.material, isSquareMap ? 1 : 0);\n        } else {\n            pass = ppl.addRenderPass(width, height, 'cc-tone-mapping');\n            pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\n            pass.addTexture(radianceName, 'inputTexture');\n            pass.setVec4('g_platform', pplConfigs.platform);\n            if (settings.toneMapping.material) {\n                pass.addQueue(rendering.QueueHint.OPAQUE)\n                    .addFullscreenQuad(settings.toneMapping.material, 0);\n            } else {\n                assert(!!cameraConfigs.copyAndTonemapMaterial);\n                pass.addQueue(rendering.QueueHint.OPAQUE)\n                    .addFullscreenQuad(cameraConfigs.copyAndTonemapMaterial, 0);\n            }\n        }\n        return pass;\n    }\n    private readonly _colorGradingTexSize = new Vec2(0, 0);\n}\n\nexport interface FXAAPassConfigs {\n    enableFXAA: boolean;\n}\n\nexport class BuiltinFXAAPassBuilder implements rendering.PipelinePassBuilder {\n    getConfigOrder(): number {\n        return 0;\n    }\n    getRenderOrder(): number {\n        return 400;\n    }\n    configCamera(\n        camera: Readonly<renderer.scene.Camera>,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FXAAPassConfigs): void {\n        cameraConfigs.enableFXAA\n            = cameraConfigs.settings.fxaa.enabled\n            && !!cameraConfigs.settings.fxaa.material;\n        if (cameraConfigs.enableFXAA) {\n            ++cameraConfigs.remainingPasses;\n        }\n    }\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FXAAPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext,\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\n        : rendering.BasicRenderPassBuilder | undefined {\n        if (!cameraConfigs.enableFXAA) {\n            return prevRenderPass;\n        }\n        --cameraConfigs.remainingPasses;\n        assert(cameraConfigs.remainingPasses >= 0);\n\n        const id = cameraConfigs.renderWindowId;\n        const ldrColorPrefix = cameraConfigs.enableShadingScale\n            ? `ScaledLdrColor`\n            : `LdrColor`;\n        const ldrColorName = getPingPongRenderTarget(context.colorName, ldrColorPrefix, id);\n\n        assert(!!cameraConfigs.settings.fxaa.material);\n        if (cameraConfigs.remainingPasses === 0) {\n            if (cameraConfigs.enableShadingScale) {\n                this._addFxaaPass(ppl, pplConfigs,\n                    cameraConfigs.settings.fxaa.material,\n                    cameraConfigs.width,\n                    cameraConfigs.height,\n                    context.colorName,\n                    ldrColorName);\n                return addCopyToScreenPass(ppl, pplConfigs, cameraConfigs, ldrColorName);\n            } else {\n                assert(cameraConfigs.width === cameraConfigs.nativeWidth);\n                assert(cameraConfigs.height === cameraConfigs.nativeHeight);\n                return this._addFxaaPass(ppl, pplConfigs,\n                    cameraConfigs.settings.fxaa.material,\n                    cameraConfigs.width,\n                    cameraConfigs.height,\n                    context.colorName,\n                    cameraConfigs.colorName);\n            }\n        } else {\n            const inputColorName = context.colorName;\n            context.colorName = ldrColorName;\n            const lastPass = this._addFxaaPass(ppl, pplConfigs,\n                cameraConfigs.settings.fxaa.material,\n                cameraConfigs.width,\n                cameraConfigs.height,\n                inputColorName,\n                ldrColorName);\n            return lastPass;\n        }\n    }\n    private _addFxaaPass(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        fxaaMaterial: Material,\n        width: number,\n        height: number,\n        ldrColorName: string,\n        colorName: string,\n    ): rendering.BasicRenderPassBuilder {\n        this._fxaaParams.x = width;\n        this._fxaaParams.y = height;\n        this._fxaaParams.z = 1 / width;\n        this._fxaaParams.w = 1 / height;\n\n        const pass = ppl.addRenderPass(width, height, 'cc-fxaa');\n        pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\n        pass.addTexture(ldrColorName, 'sceneColorMap');\n        pass.setVec4('g_platform', pplConfigs.platform);\n        pass.setVec4('texSize', this._fxaaParams);\n        pass.addQueue(rendering.QueueHint.OPAQUE)\n            .addFullscreenQuad(fxaaMaterial, 0);\n        return pass;\n    }\n    // FXAA\n    private readonly _fxaaParams = new Vec4(0, 0, 0, 0);\n}\n\nexport interface FSRPassConfigs {\n    enableFSR: boolean;\n}\n\nexport class BuiltinFsrPassBuilder implements rendering.PipelinePassBuilder {\n    getConfigOrder(): number {\n        return 0;\n    }\n    getRenderOrder(): number {\n        return 500;\n    }\n    configCamera(\n        camera: Readonly<renderer.scene.Camera>,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FSRPassConfigs): void {\n        // FSR (Depend on Shading scale)\n        cameraConfigs.enableFSR = cameraConfigs.settings.fsr.enabled\n            && !!cameraConfigs.settings.fsr.material\n            && cameraConfigs.enableShadingScale\n            && cameraConfigs.shadingScale < 1.0;\n\n        if (cameraConfigs.enableFSR) {\n            ++cameraConfigs.remainingPasses;\n        }\n    }\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext,\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\n        : rendering.BasicRenderPassBuilder | undefined {\n        if (!cameraConfigs.enableFSR) {\n            return prevRenderPass;\n        }\n        --cameraConfigs.remainingPasses;\n\n        const inputColorName = context.colorName;\n        const outputColorName\n            = cameraConfigs.remainingPasses === 0\n                ? cameraConfigs.colorName\n                : getPingPongRenderTarget(context.colorName, 'UiColor', cameraConfigs.renderWindowId);\n        context.colorName = outputColorName;\n\n        assert(!!cameraConfigs.settings.fsr.material);\n        return this._addFsrPass(ppl, pplConfigs, cameraConfigs,\n            cameraConfigs.settings,\n            cameraConfigs.settings.fsr.material,\n            cameraConfigs.renderWindowId,\n            cameraConfigs.width,\n            cameraConfigs.height,\n            inputColorName,\n            cameraConfigs.nativeWidth,\n            cameraConfigs.nativeHeight,\n            outputColorName);\n    }\n    private _addFsrPass(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\n        settings: PipelineSettings,\n        fsrMaterial: Material,\n        id: number,\n        width: number,\n        height: number,\n        inputColorName: string,\n        nativeWidth: number,\n        nativeHeight: number,\n        outputColorName: string,\n    ): rendering.BasicRenderPassBuilder {\n        this._fsrTexSize.x = width;\n        this._fsrTexSize.y = height;\n        this._fsrTexSize.z = nativeWidth;\n        this._fsrTexSize.w = nativeHeight;\n        this._fsrParams.x = clamp(1.0 - settings.fsr.sharpness, 0.02, 0.98);\n\n        const uiColorPrefix = 'UiColor';\n\n        const fsrColorName = getPingPongRenderTarget(outputColorName, uiColorPrefix, id);\n\n        const easuPass = ppl.addRenderPass(nativeWidth, nativeHeight, 'cc-fsr-easu');\n        easuPass.addRenderTarget(fsrColorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\n        easuPass.addTexture(inputColorName, 'outputResultMap');\n        easuPass.setVec4('g_platform', pplConfigs.platform);\n        easuPass.setVec4('fsrTexSize', this._fsrTexSize);\n        easuPass\n            .addQueue(rendering.QueueHint.OPAQUE)\n            .addFullscreenQuad(fsrMaterial, 0);\n\n        const rcasPass = ppl.addRenderPass(nativeWidth, nativeHeight, 'cc-fsr-rcas');\n        rcasPass.addRenderTarget(outputColorName, LoadOp.CLEAR, StoreOp.STORE, sClearColorTransparentBlack);\n        rcasPass.addTexture(fsrColorName, 'outputResultMap');\n        rcasPass.setVec4('g_platform', pplConfigs.platform);\n        rcasPass.setVec4('fsrTexSize', this._fsrTexSize);\n        rcasPass.setVec4('fsrParams', this._fsrParams);\n        rcasPass\n            .addQueue(rendering.QueueHint.OPAQUE)\n            .addFullscreenQuad(fsrMaterial, 1);\n\n        return rcasPass;\n    }\n    // FSR\n    private readonly _fsrParams = new Vec4(0, 0, 0, 0);\n    private readonly _fsrTexSize = new Vec4(0, 0, 0, 0);\n}\n\nexport class BuiltinUiPassBuilder implements rendering.PipelinePassBuilder {\n    getConfigOrder(): number {\n        return 0;\n    }\n    getRenderOrder(): number {\n        return 1000;\n    }\n    setup(\n        ppl: rendering.BasicPipeline,\n        pplConfigs: Readonly<PipelineConfigs>,\n        cameraConfigs: CameraConfigs & FSRPassConfigs,\n        camera: renderer.scene.Camera,\n        context: PipelineContext,\n        prevRenderPass?: rendering.BasicRenderPassBuilder)\n        : rendering.BasicRenderPassBuilder | undefined {\n        assert(!!prevRenderPass);\n\n        let flags = rendering.SceneFlags.UI;\n        if (cameraConfigs.enableProfiler) {\n            flags |= rendering.SceneFlags.PROFILER;\n            prevRenderPass.showStatistics = true;\n        }\n        prevRenderPass\n            .addQueue(rendering.QueueHint.BLEND, 'default', 'default')\n            .addScene(camera, flags);\n\n        return prevRenderPass;\n    }\n}\n\nif (rendering) {\n\n    const { QueueHint, SceneFlags } = rendering;\n\n    class BuiltinPipelineBuilder implements rendering.PipelineBuilder {\n        private readonly _pipelineEvent: PipelineEventProcessor = cclegacy.director.root.pipelineEvent as PipelineEventProcessor;\n        private readonly _forwardPass = new BuiltinForwardPassBuilder();\n        private readonly _bloomPass = new BuiltinBloomPassBuilder();\n        private readonly _toneMappingPass = new BuiltinToneMappingPassBuilder();\n        private readonly _fxaaPass = new BuiltinFXAAPassBuilder();\n        private readonly _fsrPass = new BuiltinFsrPassBuilder();\n        private readonly _uiPass = new BuiltinUiPassBuilder();\n        // Internal cached resources\n        private readonly _clearColor = new Color(0, 0, 0, 1);\n        private readonly _viewport = new Viewport();\n        private readonly _configs = new PipelineConfigs();\n        private readonly _cameraConfigs = new CameraConfigs();\n        // Materials\n        private readonly _copyAndTonemapMaterial = new Material();\n\n        // Internal States\n        private _initialized = false; // TODO(zhouzhenglong): Make default effect asset loading earlier and remove this flag\n        private _passBuilders: rendering.PipelinePassBuilder[] = [];\n\n        private _setupPipelinePreview(\n            camera: renderer.scene.Camera,\n            cameraConfigs: CameraConfigs) {\n            const isEditorView: boolean\n                = camera.cameraUsage === CameraUsage.SCENE_VIEW\n                || camera.cameraUsage === CameraUsage.PREVIEW;\n\n            if (isEditorView) {\n                const editorSettings = rendering.getEditorPipelineSettings() as PipelineSettings | null;\n                if (editorSettings) {\n                    cameraConfigs.settings = editorSettings;\n                } else {\n                    cameraConfigs.settings = defaultSettings;\n                }\n            } else {\n                if (camera.pipelineSettings) {\n                    cameraConfigs.settings = camera.pipelineSettings as PipelineSettings;\n                } else {\n                    cameraConfigs.settings = defaultSettings;\n                }\n            }\n        }\n\n        private _preparePipelinePasses(cameraConfigs: CameraConfigs): void {\n            const passBuilders = this._passBuilders;\n            passBuilders.length = 0;\n\n            const settings = cameraConfigs.settings as PipelineSettings2;\n            if (settings._passes) {\n                for (const pass of settings._passes) {\n                    passBuilders.push(pass);\n                }\n                assert(passBuilders.length === settings._passes.length);\n            }\n\n            passBuilders.push(this._forwardPass);\n\n            if (settings.bloom.enabled) {\n                passBuilders.push(this._bloomPass);\n            }\n\n            passBuilders.push(this._toneMappingPass);\n\n            if (settings.fxaa.enabled) {\n                passBuilders.push(this._fxaaPass);\n            }\n\n            if (settings.fsr.enabled) {\n                passBuilders.push(this._fsrPass);\n            }\n            passBuilders.push(this._uiPass);\n        }\n\n        private _setupBuiltinCameraConfigs(\n            camera: renderer.scene.Camera,\n            pipelineConfigs: PipelineConfigs,\n            cameraConfigs: CameraConfigs\n        ) {\n            const window = camera.window;\n            const isMainGameWindow: boolean = camera.cameraUsage === CameraUsage.GAME && !!window.swapchain;\n\n            // Window\n            cameraConfigs.isMainGameWindow = isMainGameWindow;\n            cameraConfigs.renderWindowId = window.renderWindowId;\n\n            // Camera\n            cameraConfigs.colorName = window.colorName;\n            cameraConfigs.depthStencilName = window.depthStencilName;\n\n            // Pipeline\n            cameraConfigs.enableFullPipeline = (camera.visibility & (Layers.Enum.DEFAULT)) !== 0;\n            cameraConfigs.enableProfiler = DEBUG && isMainGameWindow;\n            cameraConfigs.remainingPasses = 0;\n\n            // Shading scale\n            cameraConfigs.shadingScale = cameraConfigs.settings.shadingScale;\n            cameraConfigs.enableShadingScale = cameraConfigs.settings.enableShadingScale\n                && cameraConfigs.shadingScale !== 1.0;\n\n            cameraConfigs.nativeWidth = Math.max(Math.floor(window.width), 1);\n            cameraConfigs.nativeHeight = Math.max(Math.floor(window.height), 1);\n\n            cameraConfigs.width = cameraConfigs.enableShadingScale\n                ? Math.max(Math.floor(cameraConfigs.nativeWidth * cameraConfigs.shadingScale), 1)\n                : cameraConfigs.nativeWidth;\n            cameraConfigs.height = cameraConfigs.enableShadingScale\n                ? Math.max(Math.floor(cameraConfigs.nativeHeight * cameraConfigs.shadingScale), 1)\n                : cameraConfigs.nativeHeight;\n\n            // Radiance\n            cameraConfigs.enableHDR = cameraConfigs.enableFullPipeline\n                && pipelineConfigs.useFloatOutput;\n            cameraConfigs.radianceFormat = cameraConfigs.enableHDR\n                ? gfx.Format.RGBA16F : gfx.Format.RGBA8;\n\n            // Tone Mapping\n            cameraConfigs.copyAndTonemapMaterial = this._copyAndTonemapMaterial;\n\n            // Depth\n            cameraConfigs.enableStoreSceneDepth = false;\n        }\n\n        private _setupCameraConfigs(\n            camera: renderer.scene.Camera,\n            pipelineConfigs: PipelineConfigs,\n            cameraConfigs: CameraConfigs\n        ): void {\n            this._setupPipelinePreview(camera, cameraConfigs);\n\n            this._preparePipelinePasses(cameraConfigs);\n\n            sortPipelinePassBuildersByConfigOrder(this._passBuilders);\n\n            this._setupBuiltinCameraConfigs(camera, pipelineConfigs, cameraConfigs);\n\n            for (const builder of this._passBuilders) {\n                if (builder.configCamera) {\n                    builder.configCamera(camera, pipelineConfigs, cameraConfigs);\n                }\n            }\n        }\n\n        // ----------------------------------------------------------------\n        // Interface\n        // ----------------------------------------------------------------\n        windowResize(\n            ppl: rendering.BasicPipeline,\n            window: renderer.RenderWindow,\n            camera: renderer.scene.Camera,\n            nativeWidth: number,\n            nativeHeight: number,\n        ): void {\n            setupPipelineConfigs(ppl, this._configs);\n\n            this._setupCameraConfigs(camera, this._configs, this._cameraConfigs);\n\n            // Render Window (UI)\n            const id = window.renderWindowId;\n\n            ppl.addRenderWindow(this._cameraConfigs.colorName,\n                Format.RGBA8, nativeWidth, nativeHeight, window,\n                this._cameraConfigs.depthStencilName);\n\n            const width = this._cameraConfigs.width;\n            const height = this._cameraConfigs.height;\n\n            if (this._cameraConfigs.enableShadingScale) {\n                ppl.addDepthStencil(`ScaledSceneDepth_${id}`, Format.DEPTH_STENCIL, width, height);\n                ppl.addRenderTarget(`ScaledRadiance0_${id}`, this._cameraConfigs.radianceFormat, width, height);\n                ppl.addRenderTarget(`ScaledRadiance1_${id}`, this._cameraConfigs.radianceFormat, width, height);\n                ppl.addRenderTarget(`ScaledLdrColor0_${id}`, Format.RGBA8, width, height);\n                ppl.addRenderTarget(`ScaledLdrColor1_${id}`, Format.RGBA8, width, height);\n            } else {\n                ppl.addDepthStencil(`SceneDepth_${id}`, Format.DEPTH_STENCIL, width, height);\n                ppl.addRenderTarget(`Radiance0_${id}`, this._cameraConfigs.radianceFormat, width, height);\n                ppl.addRenderTarget(`Radiance1_${id}`, this._cameraConfigs.radianceFormat, width, height);\n                ppl.addRenderTarget(`LdrColor0_${id}`, Format.RGBA8, width, height);\n                ppl.addRenderTarget(`LdrColor1_${id}`, Format.RGBA8, width, height);\n            }\n            ppl.addRenderTarget(`UiColor0_${id}`, Format.RGBA8, nativeWidth, nativeHeight);\n            ppl.addRenderTarget(`UiColor1_${id}`, Format.RGBA8, nativeWidth, nativeHeight);\n\n            for (const builder of this._passBuilders) {\n                if (builder.windowResize) {\n                    builder.windowResize(ppl, this._configs, this._cameraConfigs, window, camera, nativeWidth, nativeHeight);\n                }\n            }\n        }\n        setup(cameras: renderer.scene.Camera[], ppl: rendering.BasicPipeline): void {\n            // TODO(zhouzhenglong): Make default effect asset loading earlier and remove _initMaterials\n            if (this._initMaterials(ppl)) {\n                return;\n            }\n            // Render cameras\n            // log(`==================== One Frame ====================`);\n            for (const camera of cameras) {\n                // Skip invalid camera\n                if (!camera.scene || !camera.window) {\n                    continue;\n                }\n                // Setup camera configs\n                this._setupCameraConfigs(camera, this._configs, this._cameraConfigs);\n                // log(`Setup camera: ${camera.node!.name}, window: ${camera.window.renderWindowId}, isFull: ${this._cameraConfigs.enableFullPipeline}, `\n                //     + `size: ${camera.window.width}x${camera.window.height}`);\n\n                this._pipelineEvent.emit(PipelineEventType.RENDER_CAMERA_BEGIN, camera);\n\n                // Build pipeline\n                if (this._cameraConfigs.enableFullPipeline) {\n                    this._buildForwardPipeline(ppl, camera, camera.scene, this._passBuilders);\n                } else {\n                    this._buildSimplePipeline(ppl, camera);\n                }\n\n                this._pipelineEvent.emit(PipelineEventType.RENDER_CAMERA_END, camera);\n            }\n        }\n        // ----------------------------------------------------------------\n        // Pipelines\n        // ----------------------------------------------------------------\n        private _buildSimplePipeline(\n            ppl: rendering.BasicPipeline,\n            camera: renderer.scene.Camera,\n        ): void {\n            const width = Math.max(Math.floor(camera.window.width), 1);\n            const height = Math.max(Math.floor(camera.window.height), 1);\n            const colorName = this._cameraConfigs.colorName;\n            const depthStencilName = this._cameraConfigs.depthStencilName;\n\n            const viewport = camera.viewport;  // Reduce C++/TS interop\n            this._viewport.left = Math.round(viewport.x * width);\n            this._viewport.top = Math.round(viewport.y * height);\n            // Here we must use camera.viewport.width instead of camera.viewport.z, which\n            // is undefined on native platform. The same as camera.viewport.height.\n            this._viewport.width = Math.max(Math.round(viewport.width * width), 1);\n            this._viewport.height = Math.max(Math.round(viewport.height * height), 1);\n\n            const clearColor = camera.clearColor;  // Reduce C++/TS interop\n            this._clearColor.x = clearColor.x;\n            this._clearColor.y = clearColor.y;\n            this._clearColor.z = clearColor.z;\n            this._clearColor.w = clearColor.w;\n\n            const pass = ppl.addRenderPass(width, height, 'default');\n\n            // bind output render target\n            if (forwardNeedClearColor(camera)) {\n                pass.addRenderTarget(colorName, LoadOp.CLEAR, StoreOp.STORE, this._clearColor);\n            } else {\n                pass.addRenderTarget(colorName, LoadOp.LOAD, StoreOp.STORE);\n            }\n\n            // bind depth stencil buffer\n            if (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) {\n                pass.addDepthStencil(\n                    depthStencilName,\n                    LoadOp.CLEAR,\n                    StoreOp.DISCARD,\n                    camera.clearDepth,\n                    camera.clearStencil,\n                    camera.clearFlag & ClearFlagBit.DEPTH_STENCIL,\n                );\n            } else {\n                pass.addDepthStencil(depthStencilName, LoadOp.LOAD, StoreOp.DISCARD);\n            }\n\n            pass.setViewport(this._viewport);\n\n            // The opaque queue is used for Reflection probe preview\n            pass.addQueue(QueueHint.OPAQUE)\n                .addScene(camera, SceneFlags.OPAQUE);\n\n            // The blend queue is used for UI and Gizmos\n            let flags = SceneFlags.BLEND | SceneFlags.UI;\n            if (this._cameraConfigs.enableProfiler) {\n                flags |= SceneFlags.PROFILER;\n                pass.showStatistics = true;\n            }\n            pass.addQueue(QueueHint.BLEND)\n                .addScene(camera, flags);\n        }\n\n        private _buildForwardPipeline(\n            ppl: rendering.BasicPipeline,\n            camera: renderer.scene.Camera,\n            scene: renderer.RenderScene,\n            passBuilders: rendering.PipelinePassBuilder[],\n        ): void {\n            sortPipelinePassBuildersByRenderOrder(passBuilders);\n\n            const context: PipelineContext = {\n                colorName: '',\n                depthStencilName: '',\n            };\n\n            let lastPass: rendering.BasicRenderPassBuilder | undefined = undefined;\n\n            for (const builder of passBuilders) {\n                if (builder.setup) {\n                    lastPass = builder.setup(ppl, this._configs, this._cameraConfigs,\n                        camera, context, lastPass);\n                }\n            }\n\n            assert(this._cameraConfigs.remainingPasses === 0);\n        }\n\n        private _initMaterials(ppl: rendering.BasicPipeline): number {\n            if (this._initialized) {\n                return 0;\n            }\n\n            setupPipelineConfigs(ppl, this._configs);\n\n            // When add new effect asset, please add its uuid to the dependentAssets in cc.config.json.\n            this._copyAndTonemapMaterial._uuid = `builtin-pipeline-tone-mapping-material`;\n            this._copyAndTonemapMaterial.initialize({ effectName: 'pipeline/post-process/tone-mapping' });\n\n            if (this._copyAndTonemapMaterial.effectAsset) {\n                this._initialized = true;\n            }\n\n            return this._initialized ? 0 : 1;\n        }\n    }\n\n    rendering.setCustomPipeline('Builtin', new BuiltinPipelineBuilder());\n\n} // if (rendering)\n"]}